unit Neslib.HarfBuzz;
{ This unit is partially automatically generated by Chet:
  https://github.com/neslib/Chet }

{$MINENUMSIZE 4}

interface

const
  HB_FEATURE_GLOBAL_START                 = 0;
  HB_FEATURE_GLOBAL_END                   = $FFFFFFFF;
  HB_UNICODE_MAX                          = $10FFFF;
  HB_UNICODE_COMBINING_CLASS_CCC133       = 133;
  HB_UNICODE_MAX_DECOMPOSITION_LEN        = (18+1);
  HB_VERSION_MAJOR                        = 11;
  HB_VERSION_MINOR                        = 2;
  HB_VERSION_MICRO                        = 1;
  HB_VERSION_AS_STRING                    = '11.2.1';
  HB_FONT_NO_VAR_NAMED_INSTANCE           = $FFFFFFFF;
  HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT = $FFFD;

type
  hb_direction_t = Integer;
  Phb_direction_t = ^hb_direction_t;

const
  HB_DIRECTION_INVALID = 0;
  HB_DIRECTION_LTR = 4;
  HB_DIRECTION_RTL = 5;
  HB_DIRECTION_TTB = 6;
  HB_DIRECTION_BTT = 7;

type
  hb_script_t = Integer;
  Phb_script_t = ^hb_script_t;

const
  HB_SCRIPT_COMMON = 1517910393;
  HB_SCRIPT_INHERITED = 1516858984;
  HB_SCRIPT_UNKNOWN = 1517976186;
  HB_SCRIPT_ARABIC = 1098015074;
  HB_SCRIPT_ARMENIAN = 1098018158;
  HB_SCRIPT_BENGALI = 1113943655;
  HB_SCRIPT_CYRILLIC = 1132032620;
  HB_SCRIPT_DEVANAGARI = 1147500129;
  HB_SCRIPT_GEORGIAN = 1197830002;
  HB_SCRIPT_GREEK = 1198679403;
  HB_SCRIPT_GUJARATI = 1198877298;
  HB_SCRIPT_GURMUKHI = 1198879349;
  HB_SCRIPT_HANGUL = 1214344807;
  HB_SCRIPT_HAN = 1214344809;
  HB_SCRIPT_HEBREW = 1214603890;
  HB_SCRIPT_HIRAGANA = 1214870113;
  HB_SCRIPT_KANNADA = 1265525857;
  HB_SCRIPT_KATAKANA = 1264676449;
  HB_SCRIPT_LAO = 1281453935;
  HB_SCRIPT_LATIN = 1281455214;
  HB_SCRIPT_MALAYALAM = 1298954605;
  HB_SCRIPT_ORIYA = 1332902241;
  HB_SCRIPT_TAMIL = 1415671148;
  HB_SCRIPT_TELUGU = 1415933045;
  HB_SCRIPT_THAI = 1416126825;
  HB_SCRIPT_TIBETAN = 1416192628;
  HB_SCRIPT_BOPOMOFO = 1114599535;
  HB_SCRIPT_BRAILLE = 1114792297;
  HB_SCRIPT_CANADIAN_SYLLABICS = 1130458739;
  HB_SCRIPT_CHEROKEE = 1130915186;
  HB_SCRIPT_ETHIOPIC = 1165256809;
  HB_SCRIPT_KHMER = 1265134962;
  HB_SCRIPT_MONGOLIAN = 1299148391;
  HB_SCRIPT_MYANMAR = 1299803506;
  HB_SCRIPT_OGHAM = 1332175213;
  HB_SCRIPT_RUNIC = 1383427698;
  HB_SCRIPT_SINHALA = 1399418472;
  HB_SCRIPT_SYRIAC = 1400468067;
  HB_SCRIPT_THAANA = 1416126817;
  HB_SCRIPT_YI = 1500080489;
  HB_SCRIPT_DESERET = 1148416628;
  HB_SCRIPT_GOTHIC = 1198486632;
  HB_SCRIPT_OLD_ITALIC = 1232363884;
  HB_SCRIPT_BUHID = 1114990692;
  HB_SCRIPT_HANUNOO = 1214344815;
  HB_SCRIPT_TAGALOG = 1416064103;
  HB_SCRIPT_TAGBANWA = 1415669602;
  HB_SCRIPT_CYPRIOT = 1131442804;
  HB_SCRIPT_LIMBU = 1281977698;
  HB_SCRIPT_LINEAR_B = 1281977954;
  HB_SCRIPT_OSMANYA = 1332964705;
  HB_SCRIPT_SHAVIAN = 1399349623;
  HB_SCRIPT_TAI_LE = 1415670885;
  HB_SCRIPT_UGARITIC = 1432838514;
  HB_SCRIPT_BUGINESE = 1114990441;
  HB_SCRIPT_COPTIC = 1131376756;
  HB_SCRIPT_GLAGOLITIC = 1198285159;
  HB_SCRIPT_KHAROSHTHI = 1265131890;
  HB_SCRIPT_NEW_TAI_LUE = 1415670901;
  HB_SCRIPT_OLD_PERSIAN = 1483761007;
  HB_SCRIPT_SYLOTI_NAGRI = 1400466543;
  HB_SCRIPT_TIFINAGH = 1415999079;
  HB_SCRIPT_BALINESE = 1113681001;
  HB_SCRIPT_CUNEIFORM = 1483961720;
  HB_SCRIPT_NKO = 1315663727;
  HB_SCRIPT_PHAGS_PA = 1349017959;
  HB_SCRIPT_PHOENICIAN = 1349021304;
  HB_SCRIPT_CARIAN = 1130459753;
  HB_SCRIPT_CHAM = 1130914157;
  HB_SCRIPT_KAYAH_LI = 1264675945;
  HB_SCRIPT_LEPCHA = 1281716323;
  HB_SCRIPT_LYCIAN = 1283023721;
  HB_SCRIPT_LYDIAN = 1283023977;
  HB_SCRIPT_OL_CHIKI = 1332503403;
  HB_SCRIPT_REJANG = 1382706791;
  HB_SCRIPT_SAURASHTRA = 1398895986;
  HB_SCRIPT_SUNDANESE = 1400204900;
  HB_SCRIPT_VAI = 1449224553;
  HB_SCRIPT_AVESTAN = 1098281844;
  HB_SCRIPT_BAMUM = 1113681269;
  HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = 1164409200;
  HB_SCRIPT_IMPERIAL_ARAMAIC = 1098018153;
  HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = 1349020777;
  HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = 1349678185;
  HB_SCRIPT_JAVANESE = 1247901281;
  HB_SCRIPT_KAITHI = 1265920105;
  HB_SCRIPT_LISU = 1281979253;
  HB_SCRIPT_MEETEI_MAYEK = 1299473769;
  HB_SCRIPT_OLD_SOUTH_ARABIAN = 1398895202;
  HB_SCRIPT_OLD_TURKIC = 1332898664;
  HB_SCRIPT_SAMARITAN = 1398893938;
  HB_SCRIPT_TAI_THAM = 1281453665;
  HB_SCRIPT_TAI_VIET = 1415673460;
  HB_SCRIPT_BATAK = 1113683051;
  HB_SCRIPT_BRAHMI = 1114792296;
  HB_SCRIPT_MANDAIC = 1298230884;
  HB_SCRIPT_CHAKMA = 1130457965;
  HB_SCRIPT_MEROITIC_CURSIVE = 1298494051;
  HB_SCRIPT_MEROITIC_HIEROGLYPHS = 1298494063;
  HB_SCRIPT_MIAO = 1349284452;
  HB_SCRIPT_SHARADA = 1399353956;
  HB_SCRIPT_SORA_SOMPENG = 1399812705;
  HB_SCRIPT_TAKRI = 1415670642;
  HB_SCRIPT_BASSA_VAH = 1113682803;
  HB_SCRIPT_CAUCASIAN_ALBANIAN = 1097295970;
  HB_SCRIPT_DUPLOYAN = 1148547180;
  HB_SCRIPT_ELBASAN = 1164730977;
  HB_SCRIPT_GRANTHA = 1198678382;
  HB_SCRIPT_KHOJKI = 1265135466;
  HB_SCRIPT_KHUDAWADI = 1399418468;
  HB_SCRIPT_LINEAR_A = 1281977953;
  HB_SCRIPT_MAHAJANI = 1298229354;
  HB_SCRIPT_MANICHAEAN = 1298230889;
  HB_SCRIPT_MENDE_KIKAKUI = 1298493028;
  HB_SCRIPT_MODI = 1299145833;
  HB_SCRIPT_MRO = 1299345263;
  HB_SCRIPT_NABATAEAN = 1315070324;
  HB_SCRIPT_OLD_NORTH_ARABIAN = 1315009122;
  HB_SCRIPT_OLD_PERMIC = 1348825709;
  HB_SCRIPT_PAHAWH_HMONG = 1215131239;
  HB_SCRIPT_PALMYRENE = 1348562029;
  HB_SCRIPT_PAU_CIN_HAU = 1348564323;
  HB_SCRIPT_PSALTER_PAHLAVI = 1349020784;
  HB_SCRIPT_SIDDHAM = 1399415908;
  HB_SCRIPT_TIRHUTA = 1416196712;
  HB_SCRIPT_WARANG_CITI = 1466004065;
  HB_SCRIPT_AHOM = 1097363309;
  HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = 1215067511;
  HB_SCRIPT_HATRAN = 1214346354;
  HB_SCRIPT_MULTANI = 1299541108;
  HB_SCRIPT_OLD_HUNGARIAN = 1215655527;
  HB_SCRIPT_SIGNWRITING = 1399287415;
  HB_SCRIPT_ADLAM = 1097100397;
  HB_SCRIPT_BHAIKSUKI = 1114139507;
  HB_SCRIPT_MARCHEN = 1298231907;
  HB_SCRIPT_OSAGE = 1332963173;
  HB_SCRIPT_TANGUT = 1415671399;
  HB_SCRIPT_NEWA = 1315272545;
  HB_SCRIPT_MASARAM_GONDI = 1198485101;
  HB_SCRIPT_NUSHU = 1316186229;
  HB_SCRIPT_SOYOMBO = 1399814511;
  HB_SCRIPT_ZANABAZAR_SQUARE = 1516334690;
  HB_SCRIPT_DOGRA = 1148151666;
  HB_SCRIPT_GUNJALA_GONDI = 1198485095;
  HB_SCRIPT_HANIFI_ROHINGYA = 1383032935;
  HB_SCRIPT_MAKASAR = 1298230113;
  HB_SCRIPT_MEDEFAIDRIN = 1298490470;
  HB_SCRIPT_OLD_SOGDIAN = 1399809903;
  HB_SCRIPT_SOGDIAN = 1399809892;
  HB_SCRIPT_ELYMAIC = 1164736877;
  HB_SCRIPT_NANDINAGARI = 1315008100;
  HB_SCRIPT_NYIAKENG_PUACHUE_HMONG = 1215131248;
  HB_SCRIPT_WANCHO = 1466132591;
  HB_SCRIPT_CHORASMIAN = 1130918515;
  HB_SCRIPT_DIVES_AKURU = 1147756907;
  HB_SCRIPT_KHITAN_SMALL_SCRIPT = 1265202291;
  HB_SCRIPT_YEZIDI = 1499822697;
  HB_SCRIPT_CYPRO_MINOAN = 1131441518;
  HB_SCRIPT_OLD_UYGHUR = 1333094258;
  HB_SCRIPT_TANGSA = 1416524641;
  HB_SCRIPT_TOTO = 1416590447;
  HB_SCRIPT_VITHKUQI = 1449751656;
  HB_SCRIPT_MATH = 1517122664;
  HB_SCRIPT_KAWI = 1264678761;
  HB_SCRIPT_NAG_MUNDARI = 1315006317;
  HB_SCRIPT_GARAY = 1197568609;
  HB_SCRIPT_GURUNG_KHEMA = 1198877544;
  HB_SCRIPT_KIRAT_RAI = 1265787241;
  HB_SCRIPT_OL_ONAL = 1332633967;
  HB_SCRIPT_SUNUWAR = 1400204917;
  HB_SCRIPT_TODHRI = 1416586354;
  HB_SCRIPT_TULU_TIGALARI = 1416983655;
  HB_SCRIPT_INVALID = 0;
  _HB_SCRIPT_MAX_VALUE = 2147483647;
  _HB_SCRIPT_MAX_VALUE_SIGNED = 2147483647;

type
  hb_memory_mode_t = Integer;
  Phb_memory_mode_t = ^hb_memory_mode_t;

const
  HB_MEMORY_MODE_DUPLICATE = 0;
  HB_MEMORY_MODE_READONLY = 1;
  HB_MEMORY_MODE_WRITABLE = 2;
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3;

type
  hb_unicode_general_category_t = Integer;
  Phb_unicode_general_category_t = ^hb_unicode_general_category_t;

const
  HB_UNICODE_GENERAL_CATEGORY_CONTROL = 0;
  HB_UNICODE_GENERAL_CATEGORY_FORMAT = 1;
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED = 2;
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE = 3;
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE = 4;
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER = 5;
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER = 6;
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER = 7;
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER = 8;
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER = 9;
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK = 10;
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK = 11;
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK = 12;
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER = 13;
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER = 14;
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER = 15;
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION = 16;
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION = 17;
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION = 18;
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION = 19;
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION = 20;
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION = 21;
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION = 22;
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL = 23;
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL = 24;
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL = 25;
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL = 26;
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR = 27;
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR = 28;
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR = 29;

type
  hb_unicode_combining_class_t = Integer;
  Phb_unicode_combining_class_t = ^hb_unicode_combining_class_t;

const
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0;
  HB_UNICODE_COMBINING_CLASS_OVERLAY = 1;
  HB_UNICODE_COMBINING_CLASS_NUKTA = 7;
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8;
  HB_UNICODE_COMBINING_CLASS_VIRAMA = 9;
  HB_UNICODE_COMBINING_CLASS_CCC10 = 10;
  HB_UNICODE_COMBINING_CLASS_CCC11 = 11;
  HB_UNICODE_COMBINING_CLASS_CCC12 = 12;
  HB_UNICODE_COMBINING_CLASS_CCC13 = 13;
  HB_UNICODE_COMBINING_CLASS_CCC14 = 14;
  HB_UNICODE_COMBINING_CLASS_CCC15 = 15;
  HB_UNICODE_COMBINING_CLASS_CCC16 = 16;
  HB_UNICODE_COMBINING_CLASS_CCC17 = 17;
  HB_UNICODE_COMBINING_CLASS_CCC18 = 18;
  HB_UNICODE_COMBINING_CLASS_CCC19 = 19;
  HB_UNICODE_COMBINING_CLASS_CCC20 = 20;
  HB_UNICODE_COMBINING_CLASS_CCC21 = 21;
  HB_UNICODE_COMBINING_CLASS_CCC22 = 22;
  HB_UNICODE_COMBINING_CLASS_CCC23 = 23;
  HB_UNICODE_COMBINING_CLASS_CCC24 = 24;
  HB_UNICODE_COMBINING_CLASS_CCC25 = 25;
  HB_UNICODE_COMBINING_CLASS_CCC26 = 26;
  HB_UNICODE_COMBINING_CLASS_CCC27 = 27;
  HB_UNICODE_COMBINING_CLASS_CCC28 = 28;
  HB_UNICODE_COMBINING_CLASS_CCC29 = 29;
  HB_UNICODE_COMBINING_CLASS_CCC30 = 30;
  HB_UNICODE_COMBINING_CLASS_CCC31 = 31;
  HB_UNICODE_COMBINING_CLASS_CCC32 = 32;
  HB_UNICODE_COMBINING_CLASS_CCC33 = 33;
  HB_UNICODE_COMBINING_CLASS_CCC34 = 34;
  HB_UNICODE_COMBINING_CLASS_CCC35 = 35;
  HB_UNICODE_COMBINING_CLASS_CCC36 = 36;
  HB_UNICODE_COMBINING_CLASS_CCC84 = 84;
  HB_UNICODE_COMBINING_CLASS_CCC91 = 91;
  HB_UNICODE_COMBINING_CLASS_CCC103 = 103;
  HB_UNICODE_COMBINING_CLASS_CCC107 = 107;
  HB_UNICODE_COMBINING_CLASS_CCC118 = 118;
  HB_UNICODE_COMBINING_CLASS_CCC122 = 122;
  HB_UNICODE_COMBINING_CLASS_CCC129 = 129;
  HB_UNICODE_COMBINING_CLASS_CCC130 = 130;
  HB_UNICODE_COMBINING_CLASS_CCC132 = 132;
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200;
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202;
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214;
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216;
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218;
  HB_UNICODE_COMBINING_CLASS_BELOW = 220;
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222;
  HB_UNICODE_COMBINING_CLASS_LEFT = 224;
  HB_UNICODE_COMBINING_CLASS_RIGHT = 226;
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228;
  HB_UNICODE_COMBINING_CLASS_ABOVE = 230;
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232;
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233;
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234;
  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240;
  HB_UNICODE_COMBINING_CLASS_INVALID = 255;

type
  hb_paint_extend_t = Integer;
  Phb_paint_extend_t = ^hb_paint_extend_t;

const
  HB_PAINT_EXTEND_PAD = 0;
  HB_PAINT_EXTEND_REPEAT = 1;
  HB_PAINT_EXTEND_REFLECT = 2;

type
  hb_paint_composite_mode_t = Integer;
  Phb_paint_composite_mode_t = ^hb_paint_composite_mode_t;

const
  HB_PAINT_COMPOSITE_MODE_CLEAR = 0;
  HB_PAINT_COMPOSITE_MODE_SRC = 1;
  HB_PAINT_COMPOSITE_MODE_DEST = 2;
  HB_PAINT_COMPOSITE_MODE_SRC_OVER = 3;
  HB_PAINT_COMPOSITE_MODE_DEST_OVER = 4;
  HB_PAINT_COMPOSITE_MODE_SRC_IN = 5;
  HB_PAINT_COMPOSITE_MODE_DEST_IN = 6;
  HB_PAINT_COMPOSITE_MODE_SRC_OUT = 7;
  HB_PAINT_COMPOSITE_MODE_DEST_OUT = 8;
  HB_PAINT_COMPOSITE_MODE_SRC_ATOP = 9;
  HB_PAINT_COMPOSITE_MODE_DEST_ATOP = 10;
  HB_PAINT_COMPOSITE_MODE_XOR = 11;
  HB_PAINT_COMPOSITE_MODE_PLUS = 12;
  HB_PAINT_COMPOSITE_MODE_SCREEN = 13;
  HB_PAINT_COMPOSITE_MODE_OVERLAY = 14;
  HB_PAINT_COMPOSITE_MODE_DARKEN = 15;
  HB_PAINT_COMPOSITE_MODE_LIGHTEN = 16;
  HB_PAINT_COMPOSITE_MODE_COLOR_DODGE = 17;
  HB_PAINT_COMPOSITE_MODE_COLOR_BURN = 18;
  HB_PAINT_COMPOSITE_MODE_HARD_LIGHT = 19;
  HB_PAINT_COMPOSITE_MODE_SOFT_LIGHT = 20;
  HB_PAINT_COMPOSITE_MODE_DIFFERENCE = 21;
  HB_PAINT_COMPOSITE_MODE_EXCLUSION = 22;
  HB_PAINT_COMPOSITE_MODE_MULTIPLY = 23;
  HB_PAINT_COMPOSITE_MODE_HSL_HUE = 24;
  HB_PAINT_COMPOSITE_MODE_HSL_SATURATION = 25;
  HB_PAINT_COMPOSITE_MODE_HSL_COLOR = 26;
  HB_PAINT_COMPOSITE_MODE_HSL_LUMINOSITY = 27;

type
  hb_style_tag_t = Integer;
  Phb_style_tag_t = ^hb_style_tag_t;

const
  HB_STYLE_TAG_ITALIC = 1769234796;
  HB_STYLE_TAG_OPTICAL_SIZE = 1869640570;
  HB_STYLE_TAG_SLANT_ANGLE = 1936486004;
  HB_STYLE_TAG_SLANT_RATIO = 1399615092;
  HB_STYLE_TAG_WIDTH = 2003072104;
  HB_STYLE_TAG_WEIGHT = 2003265652;
  _HB_STYLE_TAG_MAX_VALUE = 2147483647;

type
  hb_glyph_flags_t = Integer;
  Phb_glyph_flags_t = ^hb_glyph_flags_t;

const
  HB_GLYPH_FLAG_UNSAFE_TO_BREAK = 1;
  HB_GLYPH_FLAG_UNSAFE_TO_CONCAT = 2;
  HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL = 4;
  HB_GLYPH_FLAG_DEFINED = 7;

type
  hb_buffer_content_type_t = Integer;
  Phb_buffer_content_type_t = ^hb_buffer_content_type_t;

const
  HB_BUFFER_CONTENT_TYPE_INVALID = 0;
  HB_BUFFER_CONTENT_TYPE_UNICODE = 1;
  HB_BUFFER_CONTENT_TYPE_GLYPHS = 2;

type
  hb_buffer_flags_t = Integer;
  Phb_buffer_flags_t = ^hb_buffer_flags_t;

const
  HB_BUFFER_FLAG_DEFAULT = 0;
  HB_BUFFER_FLAG_BOT = 1;
  HB_BUFFER_FLAG_EOT = 2;
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 4;
  HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES = 8;
  HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE = 16;
  HB_BUFFER_FLAG_VERIFY = 32;
  HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT = 64;
  HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL = 128;
  HB_BUFFER_FLAG_DEFINED = 255;

type
  hb_buffer_cluster_level_t = Integer;
  Phb_buffer_cluster_level_t = ^hb_buffer_cluster_level_t;

const
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0;
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1;
  HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = 2;
  HB_BUFFER_CLUSTER_LEVEL_GRAPHEMES = 3;
  HB_BUFFER_CLUSTER_LEVEL_DEFAULT = 0;

type
  hb_buffer_serialize_flags_t = Integer;
  Phb_buffer_serialize_flags_t = ^hb_buffer_serialize_flags_t;

const
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0;
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 1;
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 2;
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 4;
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 8;
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS = 16;
  HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES = 32;
  HB_BUFFER_SERIALIZE_FLAG_DEFINED = 63;

type
  hb_buffer_serialize_format_t = Integer;
  Phb_buffer_serialize_format_t = ^hb_buffer_serialize_format_t;

const
  HB_BUFFER_SERIALIZE_FORMAT_TEXT = 1413830740;
  HB_BUFFER_SERIALIZE_FORMAT_JSON = 1246973774;
  HB_BUFFER_SERIALIZE_FORMAT_INVALID = 0;

type
  hb_buffer_diff_flags_t = Integer;
  Phb_buffer_diff_flags_t = ^hb_buffer_diff_flags_t;

const
  HB_BUFFER_DIFF_FLAG_EQUAL = 0;
  HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH = 1;
  HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH = 2;
  HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT = 4;
  HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT = 8;
  HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH = 16;
  HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH = 32;
  HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH = 64;
  HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH = 128;

type
  // Forward declarations
  PPUTF8Char = ^PUTF8Char;
  PUInt32 = ^UInt32;
  PUInt8 = ^UInt8;
  PUInt16 = ^UInt16;
  Phb_language_impl_t = Pointer;
  PPhb_language_impl_t = ^Phb_language_impl_t;
  Phb_user_data_key_t = ^hb_user_data_key_t;
  Phb_feature_t = ^hb_feature_t;
  Phb_variation_t = ^hb_variation_t;
  Phb_glyph_extents_t = ^hb_glyph_extents_t;
  Phb_color_stop_t = ^hb_color_stop_t;
  Phb_color_line_t = ^hb_color_line_t;
  Phb_draw_state_t = ^hb_draw_state_t;
  Phb_font_extents_t = ^hb_font_extents_t;
  Phb_glyph_info_t = ^hb_glyph_info_t;
  Phb_glyph_position_t = ^hb_glyph_position_t;
  Phb_segment_properties_t = ^hb_segment_properties_t;

  hb_bool_t = Integer;
  Phb_bool_t = ^hb_bool_t;
  hb_codepoint_t = UInt32;
  Phb_codepoint_t = ^hb_codepoint_t;
  hb_position_t = Int32;
  Phb_position_t = ^hb_position_t;
  hb_mask_t = UInt32;

  _hb_var_int_t = record
    case Integer of
      0: (u32: UInt32);
      1: (i32: Int32);
      2: (u16: array [0..1] of UInt16);
      3: (i16: array [0..1] of Int16);
      4: (u8: array [0..3] of UInt8);
      5: (i8: array [0..3] of Int8);
  end;

  hb_var_int_t = _hb_var_int_t;

  _hb_var_num_t = record
    case Integer of
      0: (f: Single);
      1: (u32: UInt32);
      2: (i32: Int32);
      3: (u16: array [0..1] of UInt16);
      4: (i16: array [0..1] of Int16);
      5: (u8: array [0..3] of UInt8);
      6: (i8: array [0..3] of Int8);
  end;

  hb_var_num_t = _hb_var_num_t;
  hb_tag_t = UInt32;
  Phb_tag_t = ^hb_tag_t;
  hb_language_t = Pointer;
  Phb_language_t = ^hb_language_t;

  hb_user_data_key_t = record
    unused: UTF8Char;
  end;

  hb_destroy_func_t = procedure(user_data: Pointer); cdecl;

  hb_feature_t = record
    tag: hb_tag_t;
    value: UInt32;
    start: Cardinal;
    &end: Cardinal;
  end;

  hb_variation_t = record
    tag: hb_tag_t;
    value: Single;
  end;

  hb_color_t = UInt32;
  Phb_color_t = ^hb_color_t;

  hb_glyph_extents_t = record
    x_bearing: hb_position_t;
    y_bearing: hb_position_t;
    width: hb_position_t;
    height: hb_position_t;
  end;

  Phb_font_t = Pointer;
  PPhb_font_t = ^Phb_font_t;
  Phb_blob_t = Pointer;
  PPhb_blob_t = ^Phb_blob_t;
  Phb_unicode_funcs_t = Pointer;
  PPhb_unicode_funcs_t = ^Phb_unicode_funcs_t;

  hb_unicode_combining_class_func_t = function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t; user_data: Pointer): hb_unicode_combining_class_t; cdecl;

  hb_unicode_general_category_func_t = function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t; user_data: Pointer): hb_unicode_general_category_t; cdecl;

  hb_unicode_mirroring_func_t = function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t; user_data: Pointer): hb_codepoint_t; cdecl;

  hb_unicode_script_func_t = function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t; user_data: Pointer): hb_script_t; cdecl;

  hb_unicode_compose_func_t = function(ufuncs: Phb_unicode_funcs_t; a: hb_codepoint_t; b: hb_codepoint_t; ab: Phb_codepoint_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_unicode_decompose_func_t = function(ufuncs: Phb_unicode_funcs_t; ab: hb_codepoint_t; a: Phb_codepoint_t; b: Phb_codepoint_t; user_data: Pointer): hb_bool_t; cdecl;
  Phb_set_t = Pointer;
  PPhb_set_t = ^Phb_set_t;
  Phb_map_t = Pointer;
  PPhb_map_t = ^Phb_map_t;
  Phb_face_t = Pointer;
  PPhb_face_t = ^Phb_face_t;

  hb_reference_table_func_t = function(face: Phb_face_t; tag: hb_tag_t; user_data: Pointer): Phb_blob_t; cdecl;

  hb_get_table_tags_func_t = function(const face: Phb_face_t; start_offset: Cardinal; table_count: PCardinal; table_tags: Phb_tag_t; user_data: Pointer): Cardinal; cdecl;

  hb_font_get_glyph_func_t = function(font: Phb_font_t; font_data: Pointer; unicode: hb_codepoint_t; variation_selector: hb_codepoint_t; glyph: Phb_codepoint_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_unicode_eastasian_width_func_t = function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t; user_data: Pointer): Cardinal; cdecl;

  hb_unicode_decompose_compatibility_func_t = function(ufuncs: Phb_unicode_funcs_t; u: hb_codepoint_t; decomposed: Phb_codepoint_t; user_data: Pointer): Cardinal; cdecl;
  hb_font_get_glyph_v_kerning_func_t = Integer;

  hb_font_get_glyph_shape_func_t = procedure(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; draw_funcs: Pointer; draw_data: Pointer; user_data: Pointer); cdecl;

  hb_font_draw_glyph_func_t = procedure(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; draw_funcs: Pointer; draw_data: Pointer; user_data: Pointer); cdecl;

  hb_font_paint_glyph_func_t = function(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; paint_funcs: Pointer; paint_data: Pointer; palette_index: Cardinal; foreground: hb_color_t; user_data: Pointer): hb_bool_t; cdecl;
  Phb_paint_funcs_t = Pointer;
  PPhb_paint_funcs_t = ^Phb_paint_funcs_t;

  hb_paint_push_transform_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; xx: Single; yx: Single; xy: Single; yy: Single; dx: Single; dy: Single; user_data: Pointer); cdecl;

  hb_paint_pop_transform_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; user_data: Pointer); cdecl;

  hb_paint_color_glyph_func_t = function(funcs: Phb_paint_funcs_t; paint_data: Pointer; glyph: hb_codepoint_t; font: Phb_font_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_paint_push_clip_glyph_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; glyph: hb_codepoint_t; font: Phb_font_t; user_data: Pointer); cdecl;

  hb_paint_push_clip_rectangle_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; xmin: Single; ymin: Single; xmax: Single; ymax: Single; user_data: Pointer); cdecl;

  hb_paint_pop_clip_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; user_data: Pointer); cdecl;

  hb_paint_color_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; is_foreground: hb_bool_t; color: hb_color_t; user_data: Pointer); cdecl;

  hb_paint_image_func_t = function(funcs: Phb_paint_funcs_t; paint_data: Pointer; image: Phb_blob_t; width: Cardinal; height: Cardinal; format: hb_tag_t; slant: Single; extents: Phb_glyph_extents_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_color_stop_t = record
    offset: Single;
    is_foreground: hb_bool_t;
    color: hb_color_t;
  end;

  hb_color_line_get_color_stops_func_t = function(color_line: Phb_color_line_t; color_line_data: Pointer; start: Cardinal; count: PCardinal; color_stops: Phb_color_stop_t; user_data: Pointer): Cardinal; cdecl;

  hb_color_line_get_extend_func_t = function(color_line: Phb_color_line_t; color_line_data: Pointer; user_data: Pointer): hb_paint_extend_t; cdecl;

  hb_color_line_t = record
    data: Pointer;
    get_color_stops: hb_color_line_get_color_stops_func_t;
    get_color_stops_user_data: Pointer;
    get_extend: hb_color_line_get_extend_func_t;
    get_extend_user_data: Pointer;
    reserved0: Pointer;
    reserved1: Pointer;
    reserved2: Pointer;
    reserved3: Pointer;
    reserved5: Pointer;
    reserved6: Pointer;
    reserved7: Pointer;
    reserved8: Pointer;
  end;

  hb_paint_linear_gradient_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_line: Phb_color_line_t; x0: Single; y0: Single; x1: Single; y1: Single; x2: Single; y2: Single; user_data: Pointer); cdecl;

  hb_paint_radial_gradient_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_line: Phb_color_line_t; x0: Single; y0: Single; r0: Single; x1: Single; y1: Single; r1: Single; user_data: Pointer); cdecl;

  hb_paint_sweep_gradient_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_line: Phb_color_line_t; x0: Single; y0: Single; start_angle: Single; end_angle: Single; user_data: Pointer); cdecl;

  hb_paint_push_group_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; user_data: Pointer); cdecl;

  hb_paint_pop_group_func_t = procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; mode: hb_paint_composite_mode_t; user_data: Pointer); cdecl;

  hb_paint_custom_palette_color_func_t = function(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_index: Cardinal; color: Phb_color_t; user_data: Pointer): hb_bool_t; cdecl;
  Phb_shape_plan_t = Pointer;
  PPhb_shape_plan_t = ^Phb_shape_plan_t;

  hb_draw_state_t = record
    path_open: hb_bool_t;
    path_start_x: Single;
    path_start_y: Single;
    current_x: Single;
    current_y: Single;
    reserved1: hb_var_num_t;
    reserved2: hb_var_num_t;
    reserved3: hb_var_num_t;
    reserved4: hb_var_num_t;
    reserved5: hb_var_num_t;
    reserved6: hb_var_num_t;
    reserved7: hb_var_num_t;
  end;

  Phb_draw_funcs_t = Pointer;
  PPhb_draw_funcs_t = ^Phb_draw_funcs_t;

  hb_draw_move_to_func_t = procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; to_x: Single; to_y: Single; user_data: Pointer); cdecl;

  hb_draw_line_to_func_t = procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; to_x: Single; to_y: Single; user_data: Pointer); cdecl;

  hb_draw_quadratic_to_func_t = procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; control_x: Single; control_y: Single; to_x: Single; to_y: Single; user_data: Pointer); cdecl;

  hb_draw_cubic_to_func_t = procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; control1_x: Single; control1_y: Single; control2_x: Single; control2_y: Single; to_x: Single; to_y: Single; user_data: Pointer); cdecl;

  hb_draw_close_path_func_t = procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; user_data: Pointer); cdecl;
  Phb_font_funcs_t = Pointer;
  PPhb_font_funcs_t = ^Phb_font_funcs_t;

  hb_font_extents_t = record
    ascender: hb_position_t;
    descender: hb_position_t;
    line_gap: hb_position_t;
    reserved9: hb_position_t;
    reserved8: hb_position_t;
    reserved7: hb_position_t;
    reserved6: hb_position_t;
    reserved5: hb_position_t;
    reserved4: hb_position_t;
    reserved3: hb_position_t;
    reserved2: hb_position_t;
    reserved1: hb_position_t;
  end;

  hb_font_get_font_extents_func_t = function(font: Phb_font_t; font_data: Pointer; extents: Phb_font_extents_t; user_data: Pointer): hb_bool_t; cdecl;
  hb_font_get_font_h_extents_func_t = hb_font_get_font_extents_func_t;
  hb_font_get_font_v_extents_func_t = hb_font_get_font_extents_func_t;

  hb_font_get_nominal_glyph_func_t = function(font: Phb_font_t; font_data: Pointer; unicode: hb_codepoint_t; glyph: Phb_codepoint_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_font_get_variation_glyph_func_t = function(font: Phb_font_t; font_data: Pointer; unicode: hb_codepoint_t; variation_selector: hb_codepoint_t; glyph: Phb_codepoint_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_font_get_nominal_glyphs_func_t = function(font: Phb_font_t; font_data: Pointer; count: Cardinal; const first_unicode: Phb_codepoint_t; unicode_stride: Cardinal; first_glyph: Phb_codepoint_t; glyph_stride: Cardinal; user_data: Pointer): Cardinal; cdecl;

  hb_font_get_glyph_advance_func_t = function(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; user_data: Pointer): hb_position_t; cdecl;
  hb_font_get_glyph_h_advance_func_t = hb_font_get_glyph_advance_func_t;
  hb_font_get_glyph_v_advance_func_t = hb_font_get_glyph_advance_func_t;

  hb_font_get_glyph_advances_func_t = procedure(font: Phb_font_t; font_data: Pointer; count: Cardinal; const first_glyph: Phb_codepoint_t; glyph_stride: Cardinal; first_advance: Phb_position_t; advance_stride: Cardinal; user_data: Pointer); cdecl;
  hb_font_get_glyph_h_advances_func_t = hb_font_get_glyph_advances_func_t;
  hb_font_get_glyph_v_advances_func_t = hb_font_get_glyph_advances_func_t;

  hb_font_get_glyph_origin_func_t = function(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; x: Phb_position_t; y: Phb_position_t; user_data: Pointer): hb_bool_t; cdecl;
  hb_font_get_glyph_h_origin_func_t = hb_font_get_glyph_origin_func_t;
  hb_font_get_glyph_v_origin_func_t = hb_font_get_glyph_origin_func_t;

  hb_font_get_glyph_kerning_func_t = function(font: Phb_font_t; font_data: Pointer; first_glyph: hb_codepoint_t; second_glyph: hb_codepoint_t; user_data: Pointer): hb_position_t; cdecl;
  hb_font_get_glyph_h_kerning_func_t = hb_font_get_glyph_kerning_func_t;

  hb_font_get_glyph_extents_func_t = function(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; extents: Phb_glyph_extents_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_font_get_glyph_contour_point_func_t = function(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; point_index: Cardinal; x: Phb_position_t; y: Phb_position_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_font_get_glyph_name_func_t = function(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; name: PUTF8Char; size: Cardinal; user_data: Pointer): hb_bool_t; cdecl;

  hb_font_get_glyph_from_name_func_t = function(font: Phb_font_t; font_data: Pointer; const name: PUTF8Char; len: Integer; glyph: Phb_codepoint_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_font_draw_glyph_or_fail_func_t = function(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; draw_funcs: Phb_draw_funcs_t; draw_data: Pointer; user_data: Pointer): hb_bool_t; cdecl;

  hb_font_paint_glyph_or_fail_func_t = function(font: Phb_font_t; font_data: Pointer; glyph: hb_codepoint_t; paint_funcs: Phb_paint_funcs_t; paint_data: Pointer; palette_index: Cardinal; foreground: hb_color_t; user_data: Pointer): hb_bool_t; cdecl;

  hb_glyph_info_t = record
    codepoint: hb_codepoint_t;
    mask: hb_mask_t;
    cluster: UInt32;
    var1: hb_var_int_t;
    var2: hb_var_int_t;
  end;

  hb_glyph_position_t = record
    x_advance: hb_position_t;
    y_advance: hb_position_t;
    x_offset: hb_position_t;
    y_offset: hb_position_t;
    &var: hb_var_int_t;
  end;

  hb_segment_properties_t = record
    direction: hb_direction_t;
    script: hb_script_t;
    language: hb_language_t;
    reserved1: Pointer;
    reserved2: Pointer;
  end;

  Phb_buffer_t = Pointer;
  PPhb_buffer_t = ^Phb_buffer_t;

  hb_buffer_message_func_t = function(buffer: Phb_buffer_t; font: Phb_font_t; const &message: PUTF8Char; user_data: Pointer): hb_bool_t; cdecl;

{$IFDEF MSWINDOWS}
var
  hb_tag_from_string: function(const str: PUTF8Char; len: Integer): hb_tag_t; cdecl = nil;
  hb_tag_to_string: procedure(tag: hb_tag_t; buf: PUTF8Char); cdecl = nil;
  hb_direction_from_string: function(const str: PUTF8Char; len: Integer): hb_direction_t; cdecl = nil;
  hb_direction_to_string: function(direction: hb_direction_t): PUTF8Char; cdecl = nil;
  hb_language_from_string: function(const str: PUTF8Char; len: Integer): hb_language_t; cdecl = nil;
  hb_language_to_string: function(language: hb_language_t): PUTF8Char; cdecl = nil;
  hb_language_get_default: function(): hb_language_t; cdecl = nil;
  hb_language_matches: function(language: hb_language_t; specific: hb_language_t): hb_bool_t; cdecl = nil;
  hb_script_from_iso15924_tag: function(tag: hb_tag_t): hb_script_t; cdecl = nil;
  hb_script_from_string: function(const str: PUTF8Char; len: Integer): hb_script_t; cdecl = nil;
  hb_script_to_iso15924_tag: function(script: hb_script_t): hb_tag_t; cdecl = nil;
  hb_script_get_horizontal_direction: function(script: hb_script_t): hb_direction_t; cdecl = nil;
  hb_feature_from_string: function(const str: PUTF8Char; len: Integer; feature: Phb_feature_t): hb_bool_t; cdecl = nil;
  hb_feature_to_string: procedure(feature: Phb_feature_t; buf: PUTF8Char; size: Cardinal); cdecl = nil;
  hb_variation_from_string: function(const str: PUTF8Char; len: Integer; variation: Phb_variation_t): hb_bool_t; cdecl = nil;
  hb_variation_to_string: procedure(variation: Phb_variation_t; buf: PUTF8Char; size: Cardinal); cdecl = nil;
  hb_color_get_alpha: function(color: hb_color_t): UInt8; cdecl = nil;
  hb_color_get_red: function(color: hb_color_t): UInt8; cdecl = nil;
  hb_color_get_green: function(color: hb_color_t): UInt8; cdecl = nil;
  hb_color_get_blue: function(color: hb_color_t): UInt8; cdecl = nil;
  hb_malloc: function(size: NativeUInt): Pointer; cdecl = nil;
  hb_calloc: function(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl = nil;
  hb_realloc: function(ptr: Pointer; size: NativeUInt): Pointer; cdecl = nil;
  hb_free: procedure(ptr: Pointer); cdecl = nil;
  hb_blob_create: function(const data: Pointer; length: Cardinal; mode: hb_memory_mode_t; user_data: Pointer; destroy: hb_destroy_func_t): Phb_blob_t; cdecl = nil;
  hb_blob_create_or_fail: function(const data: Pointer; length: Cardinal; mode: hb_memory_mode_t; user_data: Pointer; destroy: hb_destroy_func_t): Phb_blob_t; cdecl = nil;
//  hb_blob_create_from_file: function(const file_name: PUTF8Char): Phb_blob_t; cdecl = nil;
//  hb_blob_create_from_file_or_fail: function(const file_name: PUTF8Char): Phb_blob_t; cdecl = nil;
  hb_blob_create_sub_blob: function(parent: Phb_blob_t; offset: Cardinal; length: Cardinal): Phb_blob_t; cdecl = nil;
  hb_blob_copy_writable_or_fail: function(blob: Phb_blob_t): Phb_blob_t; cdecl = nil;
  hb_blob_get_empty: function(): Phb_blob_t; cdecl = nil;
  hb_blob_reference: function(blob: Phb_blob_t): Phb_blob_t; cdecl = nil;
  hb_blob_destroy: procedure(blob: Phb_blob_t); cdecl = nil;
  hb_blob_set_user_data: function(blob: Phb_blob_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
  hb_blob_get_user_data: function(const blob: Phb_blob_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
  hb_blob_make_immutable: procedure(blob: Phb_blob_t); cdecl = nil;
  hb_blob_is_immutable: function(blob: Phb_blob_t): hb_bool_t; cdecl = nil;
  hb_blob_get_length: function(blob: Phb_blob_t): Cardinal; cdecl = nil;
  hb_blob_get_data: function(blob: Phb_blob_t; length: PCardinal): PUTF8Char; cdecl = nil;
  hb_blob_get_data_writable: function(blob: Phb_blob_t; length: PCardinal): PUTF8Char; cdecl = nil;
  hb_unicode_funcs_get_default: function(): Phb_unicode_funcs_t; cdecl = nil;
  hb_unicode_funcs_create: function(parent: Phb_unicode_funcs_t): Phb_unicode_funcs_t; cdecl = nil;
  hb_unicode_funcs_get_empty: function(): Phb_unicode_funcs_t; cdecl = nil;
  hb_unicode_funcs_reference: function(ufuncs: Phb_unicode_funcs_t): Phb_unicode_funcs_t; cdecl = nil;
  hb_unicode_funcs_destroy: procedure(ufuncs: Phb_unicode_funcs_t); cdecl = nil;
  hb_unicode_funcs_set_user_data: function(ufuncs: Phb_unicode_funcs_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
  hb_unicode_funcs_get_user_data: function(const ufuncs: Phb_unicode_funcs_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
  hb_unicode_funcs_make_immutable: procedure(ufuncs: Phb_unicode_funcs_t); cdecl = nil;
  hb_unicode_funcs_is_immutable: function(ufuncs: Phb_unicode_funcs_t): hb_bool_t; cdecl = nil;
  hb_unicode_funcs_get_parent: function(ufuncs: Phb_unicode_funcs_t): Phb_unicode_funcs_t; cdecl = nil;
  hb_unicode_funcs_set_combining_class_func: procedure(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_combining_class_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_unicode_funcs_set_general_category_func: procedure(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_general_category_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_unicode_funcs_set_mirroring_func: procedure(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_mirroring_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_unicode_funcs_set_script_func: procedure(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_script_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_unicode_funcs_set_compose_func: procedure(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_compose_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_unicode_funcs_set_decompose_func: procedure(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_decompose_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_unicode_combining_class: function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): hb_unicode_combining_class_t; cdecl = nil;
  hb_unicode_general_category: function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): hb_unicode_general_category_t; cdecl = nil;
  hb_unicode_mirroring: function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): hb_codepoint_t; cdecl = nil;
  hb_unicode_script: function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): hb_script_t; cdecl = nil;
  hb_unicode_compose: function(ufuncs: Phb_unicode_funcs_t; a: hb_codepoint_t; b: hb_codepoint_t; ab: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_unicode_decompose: function(ufuncs: Phb_unicode_funcs_t; ab: hb_codepoint_t; a: Phb_codepoint_t; b: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_set_create: function(): Phb_set_t; cdecl = nil;
  hb_set_get_empty: function(): Phb_set_t; cdecl = nil;
  hb_set_reference: function(&set: Phb_set_t): Phb_set_t; cdecl = nil;
  hb_set_destroy: procedure(&set: Phb_set_t); cdecl = nil;
  hb_set_set_user_data: function(&set: Phb_set_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
  hb_set_get_user_data: function(const &set: Phb_set_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
  hb_set_allocation_successful: function(const &set: Phb_set_t): hb_bool_t; cdecl = nil;
  hb_set_copy: function(const &set: Phb_set_t): Phb_set_t; cdecl = nil;
  hb_set_clear: procedure(&set: Phb_set_t); cdecl = nil;
  hb_set_is_empty: function(const &set: Phb_set_t): hb_bool_t; cdecl = nil;
  hb_set_invert: procedure(&set: Phb_set_t); cdecl = nil;
  hb_set_is_inverted: function(const &set: Phb_set_t): hb_bool_t; cdecl = nil;
  hb_set_has: function(const &set: Phb_set_t; codepoint: hb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_set_add: procedure(&set: Phb_set_t; codepoint: hb_codepoint_t); cdecl = nil;
  hb_set_add_range: procedure(&set: Phb_set_t; first: hb_codepoint_t; last: hb_codepoint_t); cdecl = nil;
  hb_set_add_sorted_array: procedure(&set: Phb_set_t; const sorted_codepoints: Phb_codepoint_t; num_codepoints: Cardinal); cdecl = nil;
  hb_set_del: procedure(&set: Phb_set_t; codepoint: hb_codepoint_t); cdecl = nil;
  hb_set_del_range: procedure(&set: Phb_set_t; first: hb_codepoint_t; last: hb_codepoint_t); cdecl = nil;
  hb_set_is_equal: function(const &set: Phb_set_t; const other: Phb_set_t): hb_bool_t; cdecl = nil;
  hb_set_hash: function(const &set: Phb_set_t): Cardinal; cdecl = nil;
  hb_set_is_subset: function(const &set: Phb_set_t; const larger_set: Phb_set_t): hb_bool_t; cdecl = nil;
  hb_set_set: procedure(&set: Phb_set_t; const other: Phb_set_t); cdecl = nil;
  hb_set_union: procedure(&set: Phb_set_t; const other: Phb_set_t); cdecl = nil;
  hb_set_intersect: procedure(&set: Phb_set_t; const other: Phb_set_t); cdecl = nil;
  hb_set_subtract: procedure(&set: Phb_set_t; const other: Phb_set_t); cdecl = nil;
  hb_set_symmetric_difference: procedure(&set: Phb_set_t; const other: Phb_set_t); cdecl = nil;
  hb_set_get_population: function(const &set: Phb_set_t): Cardinal; cdecl = nil;
  hb_set_get_min: function(const &set: Phb_set_t): hb_codepoint_t; cdecl = nil;
  hb_set_get_max: function(const &set: Phb_set_t): hb_codepoint_t; cdecl = nil;
  hb_set_next: function(const &set: Phb_set_t; codepoint: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_set_previous: function(const &set: Phb_set_t; codepoint: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_set_next_range: function(const &set: Phb_set_t; first: Phb_codepoint_t; last: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_set_previous_range: function(const &set: Phb_set_t; first: Phb_codepoint_t; last: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_set_next_many: function(const &set: Phb_set_t; codepoint: hb_codepoint_t; &out: Phb_codepoint_t; size: Cardinal): Cardinal; cdecl = nil;
  hb_map_create: function(): Phb_map_t; cdecl = nil;
  hb_map_get_empty: function(): Phb_map_t; cdecl = nil;
  hb_map_reference: function(map: Phb_map_t): Phb_map_t; cdecl = nil;
  hb_map_destroy: procedure(map: Phb_map_t); cdecl = nil;
  hb_map_set_user_data: function(map: Phb_map_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
  hb_map_get_user_data: function(const map: Phb_map_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
  hb_map_allocation_successful: function(const map: Phb_map_t): hb_bool_t; cdecl = nil;
  hb_map_copy: function(const map: Phb_map_t): Phb_map_t; cdecl = nil;
  hb_map_clear: procedure(map: Phb_map_t); cdecl = nil;
  hb_map_is_empty: function(const map: Phb_map_t): hb_bool_t; cdecl = nil;
  hb_map_get_population: function(const map: Phb_map_t): Cardinal; cdecl = nil;
  hb_map_is_equal: function(const map: Phb_map_t; const other: Phb_map_t): hb_bool_t; cdecl = nil;
  hb_map_hash: function(const map: Phb_map_t): Cardinal; cdecl = nil;
  hb_map_set: procedure(map: Phb_map_t; key: hb_codepoint_t; value: hb_codepoint_t); cdecl = nil;
  hb_map_get: function(const map: Phb_map_t; key: hb_codepoint_t): hb_codepoint_t; cdecl = nil;
  hb_map_del: procedure(map: Phb_map_t; key: hb_codepoint_t); cdecl = nil;
  hb_map_has: function(const map: Phb_map_t; key: hb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_map_update: procedure(map: Phb_map_t; const other: Phb_map_t); cdecl = nil;
  hb_map_next: function(const map: Phb_map_t; idx: PInteger; key: Phb_codepoint_t; value: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_map_keys: procedure(const map: Phb_map_t; keys: Phb_set_t); cdecl = nil;
  hb_map_values: procedure(const map: Phb_map_t; values: Phb_set_t); cdecl = nil;
  hb_face_count: function(blob: Phb_blob_t): Cardinal; cdecl = nil;
  hb_face_create: function(blob: Phb_blob_t; index: Cardinal): Phb_face_t; cdecl = nil;
  hb_face_create_or_fail: function(blob: Phb_blob_t; index: Cardinal): Phb_face_t; cdecl = nil;
//  hb_face_create_or_fail_using: function(blob: Phb_blob_t; index: Cardinal; const loader_name: PUTF8Char): Phb_face_t; cdecl = nil;
//  hb_face_create_from_file_or_fail: function(const file_name: PUTF8Char; index: Cardinal): Phb_face_t; cdecl = nil;
//  hb_face_create_from_file_or_fail_using: function(const file_name: PUTF8Char; index: Cardinal; const loader_name: PUTF8Char): Phb_face_t; cdecl = nil;
//  hb_face_list_loaders: function(): PPUTF8Char; cdecl = nil;
  hb_face_create_for_tables: function(reference_table_func: hb_reference_table_func_t; user_data: Pointer; destroy: hb_destroy_func_t): Phb_face_t; cdecl = nil;
  hb_face_get_empty: function(): Phb_face_t; cdecl = nil;
  hb_face_reference: function(face: Phb_face_t): Phb_face_t; cdecl = nil;
  hb_face_destroy: procedure(face: Phb_face_t); cdecl = nil;
  hb_face_set_user_data: function(face: Phb_face_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
  hb_face_get_user_data: function(const face: Phb_face_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
  hb_face_make_immutable: procedure(face: Phb_face_t); cdecl = nil;
  hb_face_is_immutable: function(face: Phb_face_t): hb_bool_t; cdecl = nil;
  hb_face_reference_table: function(const face: Phb_face_t; tag: hb_tag_t): Phb_blob_t; cdecl = nil;
  hb_face_reference_blob: function(face: Phb_face_t): Phb_blob_t; cdecl = nil;
  hb_face_set_index: procedure(face: Phb_face_t; index: Cardinal); cdecl = nil;
  hb_face_get_index: function(const face: Phb_face_t): Cardinal; cdecl = nil;
  hb_face_set_upem: procedure(face: Phb_face_t; upem: Cardinal); cdecl = nil;
  hb_face_get_upem: function(const face: Phb_face_t): Cardinal; cdecl = nil;
  hb_face_set_glyph_count: procedure(face: Phb_face_t; glyph_count: Cardinal); cdecl = nil;
  hb_face_get_glyph_count: function(const face: Phb_face_t): Cardinal; cdecl = nil;
  hb_face_set_get_table_tags_func: procedure(face: Phb_face_t; func: hb_get_table_tags_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_face_get_table_tags: function(const face: Phb_face_t; start_offset: Cardinal; table_count: PCardinal; table_tags: Phb_tag_t): Cardinal; cdecl = nil;
//  hb_face_collect_unicodes: procedure(face: Phb_face_t; &out: Phb_set_t); cdecl = nil;
//  hb_face_collect_nominal_glyph_mapping: procedure(face: Phb_face_t; mapping: Phb_map_t; unicodes: Phb_set_t); cdecl = nil;
//  hb_face_collect_variation_selectors: procedure(face: Phb_face_t; &out: Phb_set_t); cdecl = nil;
//  hb_face_collect_variation_unicodes: procedure(face: Phb_face_t; variation_selector: hb_codepoint_t; &out: Phb_set_t); cdecl = nil;
  hb_face_builder_create: function(): Phb_face_t; cdecl = nil;
  hb_face_builder_add_table: function(face: Phb_face_t; tag: hb_tag_t; blob: Phb_blob_t): hb_bool_t; cdecl = nil;
  hb_face_builder_sort_tables: procedure(face: Phb_face_t; const tags: Phb_tag_t); cdecl = nil;
//  hb_font_funcs_set_glyph_func: procedure(ffuncs: Pointer; func: hb_font_get_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_unicode_funcs_set_eastasian_width_func: procedure(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_eastasian_width_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_unicode_eastasian_width: function(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): Cardinal; cdecl = nil;
//  hb_unicode_funcs_set_decompose_compatibility_func: procedure(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_decompose_compatibility_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_unicode_decompose_compatibility: function(ufuncs: Phb_unicode_funcs_t; u: hb_codepoint_t; decomposed: Phb_codepoint_t): Cardinal; cdecl = nil;
//  hb_font_funcs_set_glyph_shape_func: procedure(ffuncs: Pointer; func: hb_font_get_glyph_shape_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_font_funcs_set_draw_glyph_func: procedure(ffuncs: Pointer; func: hb_font_draw_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_font_funcs_set_paint_glyph_func: procedure(ffuncs: Pointer; func: hb_font_paint_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_font_get_glyph_shape: procedure(font: Phb_font_t; glyph: hb_codepoint_t; dfuncs: Pointer; draw_data: Pointer); cdecl = nil;
//  hb_paint_funcs_create: function(): Phb_paint_funcs_t; cdecl = nil;
//  hb_paint_funcs_get_empty: function(): Phb_paint_funcs_t; cdecl = nil;
//  hb_paint_funcs_reference: function(funcs: Phb_paint_funcs_t): Phb_paint_funcs_t; cdecl = nil;
//  hb_paint_funcs_destroy: procedure(funcs: Phb_paint_funcs_t); cdecl = nil;
//  hb_paint_funcs_set_user_data: function(funcs: Phb_paint_funcs_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
//  hb_paint_funcs_get_user_data: function(const funcs: Phb_paint_funcs_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
//  hb_paint_funcs_make_immutable: procedure(funcs: Phb_paint_funcs_t); cdecl = nil;
//  hb_paint_funcs_is_immutable: function(funcs: Phb_paint_funcs_t): hb_bool_t; cdecl = nil;
//  hb_color_line_get_color_stops: function(color_line: Phb_color_line_t; start: Cardinal; count: PCardinal; color_stops: Phb_color_stop_t): Cardinal; cdecl = nil;
//  hb_color_line_get_extend: function(color_line: Phb_color_line_t): hb_paint_extend_t; cdecl = nil;
//  hb_paint_funcs_set_push_transform_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_push_transform_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_pop_transform_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_pop_transform_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_color_glyph_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_color_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_push_clip_glyph_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_push_clip_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_push_clip_rectangle_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_push_clip_rectangle_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_pop_clip_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_pop_clip_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_color_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_color_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_image_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_image_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_linear_gradient_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_linear_gradient_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_radial_gradient_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_radial_gradient_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_sweep_gradient_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_sweep_gradient_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_push_group_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_push_group_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_pop_group_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_pop_group_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_funcs_set_custom_palette_color_func: procedure(funcs: Phb_paint_funcs_t; func: hb_paint_custom_palette_color_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_paint_push_transform: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; xx: Single; yx: Single; xy: Single; yy: Single; dx: Single; dy: Single); cdecl = nil;
//  hb_paint_push_font_transform: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; const font: Phb_font_t); cdecl = nil;
//  hb_paint_push_inverse_font_transform: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; const font: Phb_font_t); cdecl = nil;
//  hb_paint_pop_transform: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer); cdecl = nil;
//  hb_paint_color_glyph: function(funcs: Phb_paint_funcs_t; paint_data: Pointer; glyph: hb_codepoint_t; font: Phb_font_t): hb_bool_t; cdecl = nil;
//  hb_paint_push_clip_glyph: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; glyph: hb_codepoint_t; font: Phb_font_t); cdecl = nil;
//  hb_paint_push_clip_rectangle: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; xmin: Single; ymin: Single; xmax: Single; ymax: Single); cdecl = nil;
//  hb_paint_pop_clip: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer); cdecl = nil;
//  hb_paint_color: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; is_foreground: hb_bool_t; color: hb_color_t); cdecl = nil;
//  hb_paint_image: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; image: Phb_blob_t; width: Cardinal; height: Cardinal; format: hb_tag_t; slant: Single; extents: Phb_glyph_extents_t); cdecl = nil;
//  hb_paint_linear_gradient: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_line: Phb_color_line_t; x0: Single; y0: Single; x1: Single; y1: Single; x2: Single; y2: Single); cdecl = nil;
//  hb_paint_radial_gradient: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_line: Phb_color_line_t; x0: Single; y0: Single; r0: Single; x1: Single; y1: Single; r1: Single); cdecl = nil;
//  hb_paint_sweep_gradient: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_line: Phb_color_line_t; x0: Single; y0: Single; start_angle: Single; end_angle: Single); cdecl = nil;
//  hb_paint_push_group: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer); cdecl = nil;
//  hb_paint_pop_group: procedure(funcs: Phb_paint_funcs_t; paint_data: Pointer; mode: hb_paint_composite_mode_t); cdecl = nil;
//  hb_paint_custom_palette_color: function(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_index: Cardinal; color: Phb_color_t): hb_bool_t; cdecl = nil;
  hb_shape: procedure(font: Phb_font_t; buffer: Pointer; const features: Phb_feature_t; num_features: Cardinal); cdecl = nil;
  hb_shape_full: function(font: Phb_font_t; buffer: Pointer; const features: Phb_feature_t; num_features: Cardinal; const shaper_list: PPUTF8Char): hb_bool_t; cdecl = nil;
  hb_shape_list_shapers: function(): PPUTF8Char; cdecl = nil;
  hb_shape_plan_create: function(face: Phb_face_t; const props: Pointer; const user_features: Phb_feature_t; num_user_features: Cardinal; const shaper_list: PPUTF8Char): Phb_shape_plan_t; cdecl = nil;
  hb_shape_plan_create_cached: function(face: Phb_face_t; const props: Pointer; const user_features: Phb_feature_t; num_user_features: Cardinal; const shaper_list: PPUTF8Char): Phb_shape_plan_t; cdecl = nil;
  hb_shape_plan_create2: function(face: Phb_face_t; const props: Pointer; const user_features: Phb_feature_t; num_user_features: Cardinal; const coords: PInteger; num_coords: Cardinal; const shaper_list: PPUTF8Char): Phb_shape_plan_t; cdecl = nil;
  hb_shape_plan_create_cached2: function(face: Phb_face_t; const props: Pointer; const user_features: Phb_feature_t; num_user_features: Cardinal; const coords: PInteger; num_coords: Cardinal; const shaper_list: PPUTF8Char): Phb_shape_plan_t; cdecl = nil;
  hb_shape_plan_get_empty: function(): Phb_shape_plan_t; cdecl = nil;
  hb_shape_plan_reference: function(shape_plan: Phb_shape_plan_t): Phb_shape_plan_t; cdecl = nil;
  hb_shape_plan_destroy: procedure(shape_plan: Phb_shape_plan_t); cdecl = nil;
  hb_shape_plan_set_user_data: function(shape_plan: Phb_shape_plan_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
  hb_shape_plan_get_user_data: function(const shape_plan: Phb_shape_plan_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
  hb_shape_plan_execute: function(shape_plan: Phb_shape_plan_t; font: Phb_font_t; buffer: Pointer; const features: Phb_feature_t; num_features: Cardinal): hb_bool_t; cdecl = nil;
  hb_shape_plan_get_shaper: function(shape_plan: Phb_shape_plan_t): PUTF8Char; cdecl = nil;
//  hb_style_get_value: function(font: Phb_font_t; style_tag: hb_style_tag_t): Single; cdecl = nil;
  hb_version: procedure(major: PCardinal; minor: PCardinal; micro: PCardinal); cdecl = nil;
  hb_version_string: function(): PUTF8Char; cdecl = nil;
  hb_version_atleast: function(major: Cardinal; minor: Cardinal; micro: Cardinal): hb_bool_t; cdecl = nil;
//  hb_draw_funcs_set_move_to_func: procedure(dfuncs: Phb_draw_funcs_t; func: hb_draw_move_to_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_draw_funcs_set_line_to_func: procedure(dfuncs: Phb_draw_funcs_t; func: hb_draw_line_to_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_draw_funcs_set_quadratic_to_func: procedure(dfuncs: Phb_draw_funcs_t; func: hb_draw_quadratic_to_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_draw_funcs_set_cubic_to_func: procedure(dfuncs: Phb_draw_funcs_t; func: hb_draw_cubic_to_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_draw_funcs_set_close_path_func: procedure(dfuncs: Phb_draw_funcs_t; func: hb_draw_close_path_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
//  hb_draw_funcs_create: function(): Phb_draw_funcs_t; cdecl = nil;
//  hb_draw_funcs_get_empty: function(): Phb_draw_funcs_t; cdecl = nil;
//  hb_draw_funcs_reference: function(dfuncs: Phb_draw_funcs_t): Phb_draw_funcs_t; cdecl = nil;
//  hb_draw_funcs_destroy: procedure(dfuncs: Phb_draw_funcs_t); cdecl = nil;
//  hb_draw_funcs_set_user_data: function(dfuncs: Phb_draw_funcs_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
//  hb_draw_funcs_get_user_data: function(const dfuncs: Phb_draw_funcs_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
//  hb_draw_funcs_make_immutable: procedure(dfuncs: Phb_draw_funcs_t); cdecl = nil;
//  hb_draw_funcs_is_immutable: function(dfuncs: Phb_draw_funcs_t): hb_bool_t; cdecl = nil;
//  hb_draw_move_to: procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; to_x: Single; to_y: Single); cdecl = nil;
//  hb_draw_line_to: procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; to_x: Single; to_y: Single); cdecl = nil;
//  hb_draw_quadratic_to: procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; control_x: Single; control_y: Single; to_x: Single; to_y: Single); cdecl = nil;
//  hb_draw_cubic_to: procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; control1_x: Single; control1_y: Single; control2_x: Single; control2_y: Single; to_x: Single; to_y: Single); cdecl = nil;
//  hb_draw_close_path: procedure(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t); cdecl = nil;
  hb_font_funcs_create: function(): Phb_font_funcs_t; cdecl = nil;
  hb_font_funcs_get_empty: function(): Phb_font_funcs_t; cdecl = nil;
  hb_font_funcs_reference: function(ffuncs: Phb_font_funcs_t): Phb_font_funcs_t; cdecl = nil;
  hb_font_funcs_destroy: procedure(ffuncs: Phb_font_funcs_t); cdecl = nil;
  hb_font_funcs_set_user_data: function(ffuncs: Phb_font_funcs_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
  hb_font_funcs_get_user_data: function(const ffuncs: Phb_font_funcs_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
  hb_font_funcs_make_immutable: procedure(ffuncs: Phb_font_funcs_t); cdecl = nil;
  hb_font_funcs_is_immutable: function(ffuncs: Phb_font_funcs_t): hb_bool_t; cdecl = nil;
  hb_font_funcs_set_font_h_extents_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_font_h_extents_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_font_v_extents_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_font_v_extents_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_nominal_glyph_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_nominal_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_nominal_glyphs_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_nominal_glyphs_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_variation_glyph_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_variation_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_h_advance_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_h_advance_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_v_advance_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_v_advance_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_h_advances_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_h_advances_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_v_advances_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_v_advances_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_h_origin_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_h_origin_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_v_origin_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_v_origin_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_h_kerning_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_h_kerning_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_extents_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_extents_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_contour_point_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_contour_point_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_name_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_name_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_glyph_from_name_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_from_name_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_draw_glyph_or_fail_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_draw_glyph_or_fail_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_funcs_set_paint_glyph_or_fail_func: procedure(ffuncs: Phb_font_funcs_t; func: hb_font_paint_glyph_or_fail_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_get_h_extents: function(font: Phb_font_t; extents: Phb_font_extents_t): hb_bool_t; cdecl = nil;
  hb_font_get_v_extents: function(font: Phb_font_t; extents: Phb_font_extents_t): hb_bool_t; cdecl = nil;
  hb_font_get_nominal_glyph: function(font: Phb_font_t; unicode: hb_codepoint_t; glyph: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_font_get_variation_glyph: function(font: Phb_font_t; unicode: hb_codepoint_t; variation_selector: hb_codepoint_t; glyph: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_font_get_nominal_glyphs: function(font: Phb_font_t; count: Cardinal; const first_unicode: Phb_codepoint_t; unicode_stride: Cardinal; first_glyph: Phb_codepoint_t; glyph_stride: Cardinal): Cardinal; cdecl = nil;
  hb_font_get_glyph_h_advance: function(font: Phb_font_t; glyph: hb_codepoint_t): hb_position_t; cdecl = nil;
  hb_font_get_glyph_v_advance: function(font: Phb_font_t; glyph: hb_codepoint_t): hb_position_t; cdecl = nil;
  hb_font_get_glyph_h_advances: procedure(font: Phb_font_t; count: Cardinal; const first_glyph: Phb_codepoint_t; glyph_stride: Cardinal; first_advance: Phb_position_t; advance_stride: Cardinal); cdecl = nil;
  hb_font_get_glyph_v_advances: procedure(font: Phb_font_t; count: Cardinal; const first_glyph: Phb_codepoint_t; glyph_stride: Cardinal; first_advance: Phb_position_t; advance_stride: Cardinal); cdecl = nil;
  hb_font_get_glyph_h_origin: function(font: Phb_font_t; glyph: hb_codepoint_t; x: Phb_position_t; y: Phb_position_t): hb_bool_t; cdecl = nil;
  hb_font_get_glyph_v_origin: function(font: Phb_font_t; glyph: hb_codepoint_t; x: Phb_position_t; y: Phb_position_t): hb_bool_t; cdecl = nil;
  hb_font_get_glyph_h_kerning: function(font: Phb_font_t; left_glyph: hb_codepoint_t; right_glyph: hb_codepoint_t): hb_position_t; cdecl = nil;
  hb_font_get_glyph_extents: function(font: Phb_font_t; glyph: hb_codepoint_t; extents: Phb_glyph_extents_t): hb_bool_t; cdecl = nil;
  hb_font_get_glyph_contour_point: function(font: Phb_font_t; glyph: hb_codepoint_t; point_index: Cardinal; x: Phb_position_t; y: Phb_position_t): hb_bool_t; cdecl = nil;
  hb_font_get_glyph_name: function(font: Phb_font_t; glyph: hb_codepoint_t; name: PUTF8Char; size: Cardinal): hb_bool_t; cdecl = nil;
  hb_font_get_glyph_from_name: function(font: Phb_font_t; const name: PUTF8Char; len: Integer; glyph: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_font_draw_glyph_or_fail: function(font: Phb_font_t; glyph: hb_codepoint_t; dfuncs: Phb_draw_funcs_t; draw_data: Pointer): hb_bool_t; cdecl = nil;
  hb_font_paint_glyph_or_fail: function(font: Phb_font_t; glyph: hb_codepoint_t; pfuncs: Phb_paint_funcs_t; paint_data: Pointer; palette_index: Cardinal; foreground: hb_color_t): hb_bool_t; cdecl = nil;
  hb_font_get_glyph: function(font: Phb_font_t; unicode: hb_codepoint_t; variation_selector: hb_codepoint_t; glyph: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_font_get_extents_for_direction: procedure(font: Phb_font_t; direction: hb_direction_t; extents: Phb_font_extents_t); cdecl = nil;
  hb_font_get_glyph_advance_for_direction: procedure(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl = nil;
  hb_font_get_glyph_advances_for_direction: procedure(font: Phb_font_t; direction: hb_direction_t; count: Cardinal; const first_glyph: Phb_codepoint_t; glyph_stride: Cardinal; first_advance: Phb_position_t; advance_stride: Cardinal); cdecl = nil;
  hb_font_get_glyph_origin_for_direction: procedure(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl = nil;
  hb_font_add_glyph_origin_for_direction: procedure(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl = nil;
  hb_font_subtract_glyph_origin_for_direction: procedure(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl = nil;
  hb_font_get_glyph_kerning_for_direction: procedure(font: Phb_font_t; first_glyph: hb_codepoint_t; second_glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl = nil;
  hb_font_get_glyph_extents_for_origin: function(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; extents: Phb_glyph_extents_t): hb_bool_t; cdecl = nil;
  hb_font_get_glyph_contour_point_for_origin: function(font: Phb_font_t; glyph: hb_codepoint_t; point_index: Cardinal; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t): hb_bool_t; cdecl = nil;
  hb_font_glyph_to_string: procedure(font: Phb_font_t; glyph: hb_codepoint_t; s: PUTF8Char; size: Cardinal); cdecl = nil;
  hb_font_glyph_from_string: function(font: Phb_font_t; const s: PUTF8Char; len: Integer; glyph: Phb_codepoint_t): hb_bool_t; cdecl = nil;
  hb_font_draw_glyph: procedure(font: Phb_font_t; glyph: hb_codepoint_t; dfuncs: Phb_draw_funcs_t; draw_data: Pointer); cdecl = nil;
  hb_font_paint_glyph: procedure(font: Phb_font_t; glyph: hb_codepoint_t; pfuncs: Phb_paint_funcs_t; paint_data: Pointer; palette_index: Cardinal; foreground: hb_color_t); cdecl = nil;
  hb_font_create: function(face: Phb_face_t): Phb_font_t; cdecl = nil;
  hb_font_create_sub_font: function(parent: Phb_font_t): Phb_font_t; cdecl = nil;
  hb_font_get_empty: function(): Phb_font_t; cdecl = nil;
  hb_font_reference: function(font: Phb_font_t): Phb_font_t; cdecl = nil;
  hb_font_destroy: procedure(font: Phb_font_t); cdecl = nil;
  hb_font_set_user_data: function(font: Phb_font_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
  hb_font_get_user_data: function(const font: Phb_font_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
  hb_font_make_immutable: procedure(font: Phb_font_t); cdecl = nil;
  hb_font_is_immutable: function(font: Phb_font_t): hb_bool_t; cdecl = nil;
  hb_font_get_serial: function(font: Phb_font_t): Cardinal; cdecl = nil;
  hb_font_changed: procedure(font: Phb_font_t); cdecl = nil;
  hb_font_set_parent: procedure(font: Phb_font_t; parent: Phb_font_t); cdecl = nil;
  hb_font_get_parent: function(font: Phb_font_t): Phb_font_t; cdecl = nil;
  hb_font_set_face: procedure(font: Phb_font_t; face: Phb_face_t); cdecl = nil;
  hb_font_get_face: function(font: Phb_font_t): Phb_face_t; cdecl = nil;
  hb_font_set_funcs: procedure(font: Phb_font_t; klass: Phb_font_funcs_t; font_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_set_funcs_data: procedure(font: Phb_font_t; font_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
  hb_font_set_funcs_using: function(font: Phb_font_t; const name: PUTF8Char): hb_bool_t; cdecl = nil;
  hb_font_list_funcs: function(): PPUTF8Char; cdecl = nil;
  hb_font_set_scale: procedure(font: Phb_font_t; x_scale: Integer; y_scale: Integer); cdecl = nil;
  hb_font_get_scale: procedure(font: Phb_font_t; x_scale: PInteger; y_scale: PInteger); cdecl = nil;
  hb_font_set_ppem: procedure(font: Phb_font_t; x_ppem: Cardinal; y_ppem: Cardinal); cdecl = nil;
  hb_font_get_ppem: procedure(font: Phb_font_t; x_ppem: PCardinal; y_ppem: PCardinal); cdecl = nil;
  hb_font_set_ptem: procedure(font: Phb_font_t; ptem: Single); cdecl = nil;
  hb_font_get_ptem: function(font: Phb_font_t): Single; cdecl = nil;
  hb_font_is_synthetic: function(font: Phb_font_t): hb_bool_t; cdecl = nil;
  hb_font_set_synthetic_bold: procedure(font: Phb_font_t; x_embolden: Single; y_embolden: Single; in_place: hb_bool_t); cdecl = nil;
  hb_font_get_synthetic_bold: procedure(font: Phb_font_t; x_embolden: PSingle; y_embolden: PSingle; in_place: Phb_bool_t); cdecl = nil;
  hb_font_set_synthetic_slant: procedure(font: Phb_font_t; slant: Single); cdecl = nil;
  hb_font_get_synthetic_slant: function(font: Phb_font_t): Single; cdecl = nil;
//  hb_font_set_variations: procedure(font: Phb_font_t; const variations: Phb_variation_t; variations_length: Cardinal); cdecl = nil;
//  hb_font_set_variation: procedure(font: Phb_font_t; tag: hb_tag_t; value: Single); cdecl = nil;
//  hb_font_set_var_coords_design: procedure(font: Phb_font_t; const coords: PSingle; coords_length: Cardinal); cdecl = nil;
//  hb_font_get_var_coords_design: function(font: Phb_font_t; length: PCardinal): PSingle; cdecl = nil;
//  hb_font_set_var_coords_normalized: procedure(font: Phb_font_t; const coords: PInteger; coords_length: Cardinal); cdecl = nil;
//  hb_font_get_var_coords_normalized: function(font: Phb_font_t; length: PCardinal): PInteger; cdecl = nil;
//  hb_font_set_var_named_instance: procedure(font: Phb_font_t; instance_index: Cardinal); cdecl = nil;
//  hb_font_get_var_named_instance: function(font: Phb_font_t): Cardinal; cdecl = nil;
  hb_glyph_info_get_glyph_flags: function(const info: Phb_glyph_info_t): hb_glyph_flags_t; cdecl = nil;
  hb_segment_properties_equal: function(const a: Phb_segment_properties_t; const b: Phb_segment_properties_t): hb_bool_t; cdecl = nil;
  hb_segment_properties_hash: function(const p: Phb_segment_properties_t): Cardinal; cdecl = nil;
  hb_segment_properties_overlay: procedure(p: Phb_segment_properties_t; const src: Phb_segment_properties_t); cdecl = nil;
  hb_buffer_create: function(): Phb_buffer_t; cdecl = nil;
  hb_buffer_create_similar: function(const src: Phb_buffer_t): Phb_buffer_t; cdecl = nil;
  hb_buffer_reset: procedure(buffer: Phb_buffer_t); cdecl = nil;
  hb_buffer_get_empty: function(): Phb_buffer_t; cdecl = nil;
  hb_buffer_reference: function(buffer: Phb_buffer_t): Phb_buffer_t; cdecl = nil;
  hb_buffer_destroy: procedure(buffer: Phb_buffer_t); cdecl = nil;
  hb_buffer_set_user_data: function(buffer: Phb_buffer_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl = nil;
  hb_buffer_get_user_data: function(const buffer: Phb_buffer_t; key: Phb_user_data_key_t): Pointer; cdecl = nil;
  hb_buffer_set_content_type: procedure(buffer: Phb_buffer_t; content_type: hb_buffer_content_type_t); cdecl = nil;
  hb_buffer_get_content_type: function(const buffer: Phb_buffer_t): hb_buffer_content_type_t; cdecl = nil;
  hb_buffer_set_unicode_funcs: procedure(buffer: Phb_buffer_t; unicode_funcs: Phb_unicode_funcs_t); cdecl = nil;
  hb_buffer_get_unicode_funcs: function(const buffer: Phb_buffer_t): Phb_unicode_funcs_t; cdecl = nil;
  hb_buffer_set_direction: procedure(buffer: Phb_buffer_t; direction: hb_direction_t); cdecl = nil;
  hb_buffer_get_direction: function(const buffer: Phb_buffer_t): hb_direction_t; cdecl = nil;
  hb_buffer_set_script: procedure(buffer: Phb_buffer_t; script: hb_script_t); cdecl = nil;
  hb_buffer_get_script: function(const buffer: Phb_buffer_t): hb_script_t; cdecl = nil;
  hb_buffer_set_language: procedure(buffer: Phb_buffer_t; language: hb_language_t); cdecl = nil;
  hb_buffer_get_language: function(const buffer: Phb_buffer_t): hb_language_t; cdecl = nil;
  hb_buffer_set_segment_properties: procedure(buffer: Phb_buffer_t; const props: Phb_segment_properties_t); cdecl = nil;
  hb_buffer_get_segment_properties: procedure(const buffer: Phb_buffer_t; props: Phb_segment_properties_t); cdecl = nil;
  hb_buffer_guess_segment_properties: procedure(buffer: Phb_buffer_t); cdecl = nil;
  hb_buffer_set_flags: procedure(buffer: Phb_buffer_t; flags: hb_buffer_flags_t); cdecl = nil;
  hb_buffer_get_flags: function(const buffer: Phb_buffer_t): hb_buffer_flags_t; cdecl = nil;
  hb_buffer_set_cluster_level: procedure(buffer: Phb_buffer_t; cluster_level: hb_buffer_cluster_level_t); cdecl = nil;
  hb_buffer_get_cluster_level: function(const buffer: Phb_buffer_t): hb_buffer_cluster_level_t; cdecl = nil;
  hb_buffer_set_replacement_codepoint: procedure(buffer: Phb_buffer_t; replacement: hb_codepoint_t); cdecl = nil;
  hb_buffer_get_replacement_codepoint: function(const buffer: Phb_buffer_t): hb_codepoint_t; cdecl = nil;
  hb_buffer_set_invisible_glyph: procedure(buffer: Phb_buffer_t; invisible: hb_codepoint_t); cdecl = nil;
  hb_buffer_get_invisible_glyph: function(const buffer: Phb_buffer_t): hb_codepoint_t; cdecl = nil;
  hb_buffer_set_not_found_glyph: procedure(buffer: Phb_buffer_t; not_found: hb_codepoint_t); cdecl = nil;
  hb_buffer_get_not_found_glyph: function(const buffer: Phb_buffer_t): hb_codepoint_t; cdecl = nil;
  hb_buffer_set_not_found_variation_selector_glyph: procedure(buffer: Phb_buffer_t; not_found_variation_selector: hb_codepoint_t); cdecl = nil;
  hb_buffer_get_not_found_variation_selector_glyph: function(const buffer: Phb_buffer_t): hb_codepoint_t; cdecl = nil;
  hb_buffer_set_random_state: procedure(buffer: Phb_buffer_t; state: Cardinal); cdecl = nil;
  hb_buffer_get_random_state: function(const buffer: Phb_buffer_t): Cardinal; cdecl = nil;
  hb_buffer_clear_contents: procedure(buffer: Phb_buffer_t); cdecl = nil;
  hb_buffer_pre_allocate: function(buffer: Phb_buffer_t; size: Cardinal): hb_bool_t; cdecl = nil;
  hb_buffer_allocation_successful: function(buffer: Phb_buffer_t): hb_bool_t; cdecl = nil;
  hb_buffer_reverse: procedure(buffer: Phb_buffer_t); cdecl = nil;
  hb_buffer_reverse_range: procedure(buffer: Phb_buffer_t; start: Cardinal; &end: Cardinal); cdecl = nil;
  hb_buffer_reverse_clusters: procedure(buffer: Phb_buffer_t); cdecl = nil;
  hb_buffer_add: procedure(buffer: Phb_buffer_t; codepoint: hb_codepoint_t; cluster: Cardinal); cdecl = nil;
  hb_buffer_add_utf8: procedure(buffer: Phb_buffer_t; const text: PUTF8Char; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl = nil;
  hb_buffer_add_utf16: procedure(buffer: Phb_buffer_t; const text: PChar; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl = nil;
  hb_buffer_add_utf32: procedure(buffer: Phb_buffer_t; const text: PUInt32; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl = nil;
  hb_buffer_add_latin1: procedure(buffer: Phb_buffer_t; const text: PUInt8; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl = nil;
  hb_buffer_add_codepoints: procedure(buffer: Phb_buffer_t; const text: Phb_codepoint_t; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl = nil;
  hb_buffer_append: procedure(buffer: Phb_buffer_t; const source: Phb_buffer_t; start: Cardinal; &end: Cardinal); cdecl = nil;
  hb_buffer_set_length: function(buffer: Phb_buffer_t; length: Cardinal): hb_bool_t; cdecl = nil;
  hb_buffer_get_length: function(const buffer: Phb_buffer_t): Cardinal; cdecl = nil;
  hb_buffer_get_glyph_infos: function(buffer: Phb_buffer_t; length: PInteger): Phb_glyph_info_t; cdecl = nil;
  hb_buffer_get_glyph_positions: function(buffer: Phb_buffer_t; length: PInteger): Phb_glyph_position_t; cdecl = nil;
  hb_buffer_has_positions: function(buffer: Phb_buffer_t): hb_bool_t; cdecl = nil;
  hb_buffer_normalize_glyphs: procedure(buffer: Phb_buffer_t); cdecl = nil;
//  hb_buffer_serialize_format_from_string: function(const str: PUTF8Char; len: Integer): hb_buffer_serialize_format_t; cdecl = nil;
//  hb_buffer_serialize_format_to_string: function(format: hb_buffer_serialize_format_t): PUTF8Char; cdecl = nil;
//  hb_buffer_serialize_list_formats: function(): PPUTF8Char; cdecl = nil;
//  hb_buffer_serialize_glyphs: function(buffer: Phb_buffer_t; start: Cardinal; &end: Cardinal; buf: PUTF8Char; buf_size: Cardinal; buf_consumed: PCardinal; font: Phb_font_t; format: hb_buffer_serialize_format_t; flags: hb_buffer_serialize_flags_t): Cardinal; cdecl = nil;
//  hb_buffer_serialize_unicode: function(buffer: Phb_buffer_t; start: Cardinal; &end: Cardinal; buf: PUTF8Char; buf_size: Cardinal; buf_consumed: PCardinal; format: hb_buffer_serialize_format_t; flags: hb_buffer_serialize_flags_t): Cardinal; cdecl = nil;
//  hb_buffer_serialize: function(buffer: Phb_buffer_t; start: Cardinal; &end: Cardinal; buf: PUTF8Char; buf_size: Cardinal; buf_consumed: PCardinal; font: Phb_font_t; format: hb_buffer_serialize_format_t; flags: hb_buffer_serialize_flags_t): Cardinal; cdecl = nil;
//  hb_buffer_deserialize_glyphs: function(buffer: Phb_buffer_t; const buf: PUTF8Char; buf_len: Integer; end_ptr: PPUTF8Char; font: Phb_font_t; format: hb_buffer_serialize_format_t): hb_bool_t; cdecl = nil;
//  hb_buffer_deserialize_unicode: function(buffer: Phb_buffer_t; const buf: PUTF8Char; buf_len: Integer; end_ptr: PPUTF8Char; format: hb_buffer_serialize_format_t): hb_bool_t; cdecl = nil;
  hb_buffer_diff: function(buffer: Phb_buffer_t; reference: Phb_buffer_t; dottedcircle_glyph: hb_codepoint_t; position_fuzz: Cardinal): hb_buffer_diff_flags_t; cdecl = nil;
//  hb_buffer_set_message_func: procedure(buffer: Phb_buffer_t; func: hb_buffer_message_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl = nil;
{$ELSE}
const
  {$IF Defined(IOS)}
  LIB_HARFBUZZ = 'libHarfBuzz_ios.a';
  {$ELSEIF Defined(MACOS64)}
  LIB_HARFBUZZ = 'libHarfBuzz_macos.a';
  {$ELSEIF Defined(ANDROID32)}
  LIB_HARFBUZZ = 'libHarfBuzz_android32.a';
  {$ELSEIF Defined(ANDROID64)}
  LIB_HARFBUZZ = 'libHarfBuzz_android64.a';
  _PU = '';
  {$ELSE}
    {$MESSAGE Error 'Unsupported platform'}
  {$ENDIF}

function hb_tag_from_string(const str: PUTF8Char; len: Integer): hb_tag_t; cdecl; external LIB_HARFBUZZ;
procedure hb_tag_to_string(tag: hb_tag_t; buf: PUTF8Char); cdecl; external LIB_HARFBUZZ;
function hb_direction_from_string(const str: PUTF8Char; len: Integer): hb_direction_t; cdecl; external LIB_HARFBUZZ;
function hb_direction_to_string(direction: hb_direction_t): PUTF8Char; cdecl; external LIB_HARFBUZZ;
function hb_language_from_string(const str: PUTF8Char; len: Integer): hb_language_t; cdecl; external LIB_HARFBUZZ;
function hb_language_to_string(language: hb_language_t): PUTF8Char; cdecl; external LIB_HARFBUZZ;
function hb_language_get_default(): hb_language_t; cdecl; external LIB_HARFBUZZ;
function hb_language_matches(language: hb_language_t; specific: hb_language_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_script_from_iso15924_tag(tag: hb_tag_t): hb_script_t; cdecl; external LIB_HARFBUZZ;
function hb_script_from_string(const str: PUTF8Char; len: Integer): hb_script_t; cdecl; external LIB_HARFBUZZ;
function hb_script_to_iso15924_tag(script: hb_script_t): hb_tag_t; cdecl; external LIB_HARFBUZZ;
function hb_script_get_horizontal_direction(script: hb_script_t): hb_direction_t; cdecl; external LIB_HARFBUZZ;
function hb_feature_from_string(const str: PUTF8Char; len: Integer; feature: Phb_feature_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_feature_to_string(feature: Phb_feature_t; buf: PUTF8Char; size: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_variation_from_string(const str: PUTF8Char; len: Integer; variation: Phb_variation_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_variation_to_string(variation: Phb_variation_t; buf: PUTF8Char; size: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_color_get_alpha(color: hb_color_t): UInt8; cdecl; external LIB_HARFBUZZ;
function hb_color_get_red(color: hb_color_t): UInt8; cdecl; external LIB_HARFBUZZ;
function hb_color_get_green(color: hb_color_t): UInt8; cdecl; external LIB_HARFBUZZ;
function hb_color_get_blue(color: hb_color_t): UInt8; cdecl; external LIB_HARFBUZZ;
function hb_malloc(size: NativeUInt): Pointer; cdecl; external LIB_HARFBUZZ;
function hb_calloc(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl; external LIB_HARFBUZZ;
function hb_realloc(ptr: Pointer; size: NativeUInt): Pointer; cdecl; external LIB_HARFBUZZ;
procedure hb_free(ptr: Pointer); cdecl; external LIB_HARFBUZZ;
function hb_blob_create(const data: Pointer; length: Cardinal; mode: hb_memory_mode_t; user_data: Pointer; destroy: hb_destroy_func_t): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
function hb_blob_create_or_fail(const data: Pointer; length: Cardinal; mode: hb_memory_mode_t; user_data: Pointer; destroy: hb_destroy_func_t): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
//function hb_blob_create_from_file(const file_name: PUTF8Char): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
//function hb_blob_create_from_file_or_fail(const file_name: PUTF8Char): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
function hb_blob_create_sub_blob(parent: Phb_blob_t; offset: Cardinal; length: Cardinal): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
function hb_blob_copy_writable_or_fail(blob: Phb_blob_t): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
function hb_blob_get_empty(): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
function hb_blob_reference(blob: Phb_blob_t): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
procedure hb_blob_destroy(blob: Phb_blob_t); cdecl; external LIB_HARFBUZZ;
function hb_blob_set_user_data(blob: Phb_blob_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_blob_get_user_data(const blob: Phb_blob_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
procedure hb_blob_make_immutable(blob: Phb_blob_t); cdecl; external LIB_HARFBUZZ;
function hb_blob_is_immutable(blob: Phb_blob_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_blob_get_length(blob: Phb_blob_t): Cardinal; cdecl; external LIB_HARFBUZZ;
function hb_blob_get_data(blob: Phb_blob_t; length: PCardinal): PUTF8Char; cdecl; external LIB_HARFBUZZ;
function hb_blob_get_data_writable(blob: Phb_blob_t; length: PCardinal): PUTF8Char; cdecl; external LIB_HARFBUZZ;
function hb_unicode_funcs_get_default(): Phb_unicode_funcs_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_funcs_create(parent: Phb_unicode_funcs_t): Phb_unicode_funcs_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_funcs_get_empty(): Phb_unicode_funcs_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_funcs_reference(ufuncs: Phb_unicode_funcs_t): Phb_unicode_funcs_t; cdecl; external LIB_HARFBUZZ;
procedure hb_unicode_funcs_destroy(ufuncs: Phb_unicode_funcs_t); cdecl; external LIB_HARFBUZZ;
function hb_unicode_funcs_set_user_data(ufuncs: Phb_unicode_funcs_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_funcs_get_user_data(const ufuncs: Phb_unicode_funcs_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
procedure hb_unicode_funcs_make_immutable(ufuncs: Phb_unicode_funcs_t); cdecl; external LIB_HARFBUZZ;
function hb_unicode_funcs_is_immutable(ufuncs: Phb_unicode_funcs_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_funcs_get_parent(ufuncs: Phb_unicode_funcs_t): Phb_unicode_funcs_t; cdecl; external LIB_HARFBUZZ;
procedure hb_unicode_funcs_set_combining_class_func(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_combining_class_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_unicode_funcs_set_general_category_func(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_general_category_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_unicode_funcs_set_mirroring_func(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_mirroring_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_unicode_funcs_set_script_func(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_script_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_unicode_funcs_set_compose_func(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_compose_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_unicode_funcs_set_decompose_func(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_decompose_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
function hb_unicode_combining_class(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): hb_unicode_combining_class_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_general_category(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): hb_unicode_general_category_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_mirroring(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): hb_codepoint_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_script(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): hb_script_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_compose(ufuncs: Phb_unicode_funcs_t; a: hb_codepoint_t; b: hb_codepoint_t; ab: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_unicode_decompose(ufuncs: Phb_unicode_funcs_t; ab: hb_codepoint_t; a: Phb_codepoint_t; b: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_set_create(): Phb_set_t; cdecl; external LIB_HARFBUZZ;
function hb_set_get_empty(): Phb_set_t; cdecl; external LIB_HARFBUZZ;
function hb_set_reference(&set: Phb_set_t): Phb_set_t; cdecl; external LIB_HARFBUZZ;
procedure hb_set_destroy(&set: Phb_set_t); cdecl; external LIB_HARFBUZZ;
function hb_set_set_user_data(&set: Phb_set_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_set_get_user_data(const &set: Phb_set_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
function hb_set_allocation_successful(const &set: Phb_set_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_set_copy(const &set: Phb_set_t): Phb_set_t; cdecl; external LIB_HARFBUZZ;
procedure hb_set_clear(&set: Phb_set_t); cdecl; external LIB_HARFBUZZ;
function hb_set_is_empty(const &set: Phb_set_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_set_invert(&set: Phb_set_t); cdecl; external LIB_HARFBUZZ;
function hb_set_is_inverted(const &set: Phb_set_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_set_has(const &set: Phb_set_t; codepoint: hb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_set_add(&set: Phb_set_t; codepoint: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
procedure hb_set_add_range(&set: Phb_set_t; first: hb_codepoint_t; last: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
procedure hb_set_add_sorted_array(&set: Phb_set_t; const sorted_codepoints: Phb_codepoint_t; num_codepoints: Cardinal); cdecl; external LIB_HARFBUZZ;
procedure hb_set_del(&set: Phb_set_t; codepoint: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
procedure hb_set_del_range(&set: Phb_set_t; first: hb_codepoint_t; last: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
function hb_set_is_equal(const &set: Phb_set_t; const other: Phb_set_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_set_hash(const &set: Phb_set_t): Cardinal; cdecl; external LIB_HARFBUZZ;
function hb_set_is_subset(const &set: Phb_set_t; const larger_set: Phb_set_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_set_set(&set: Phb_set_t; const other: Phb_set_t); cdecl; external LIB_HARFBUZZ;
procedure hb_set_union(&set: Phb_set_t; const other: Phb_set_t); cdecl; external LIB_HARFBUZZ;
procedure hb_set_intersect(&set: Phb_set_t; const other: Phb_set_t); cdecl; external LIB_HARFBUZZ;
procedure hb_set_subtract(&set: Phb_set_t; const other: Phb_set_t); cdecl; external LIB_HARFBUZZ;
procedure hb_set_symmetric_difference(&set: Phb_set_t; const other: Phb_set_t); cdecl; external LIB_HARFBUZZ;
function hb_set_get_population(const &set: Phb_set_t): Cardinal; cdecl; external LIB_HARFBUZZ;
function hb_set_get_min(const &set: Phb_set_t): hb_codepoint_t; cdecl; external LIB_HARFBUZZ;
function hb_set_get_max(const &set: Phb_set_t): hb_codepoint_t; cdecl; external LIB_HARFBUZZ;
function hb_set_next(const &set: Phb_set_t; codepoint: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_set_previous(const &set: Phb_set_t; codepoint: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_set_next_range(const &set: Phb_set_t; first: Phb_codepoint_t; last: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_set_previous_range(const &set: Phb_set_t; first: Phb_codepoint_t; last: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_set_next_many(const &set: Phb_set_t; codepoint: hb_codepoint_t; &out: Phb_codepoint_t; size: Cardinal): Cardinal; cdecl; external LIB_HARFBUZZ;
function hb_map_create(): Phb_map_t; cdecl; external LIB_HARFBUZZ;
function hb_map_get_empty(): Phb_map_t; cdecl; external LIB_HARFBUZZ;
function hb_map_reference(map: Phb_map_t): Phb_map_t; cdecl; external LIB_HARFBUZZ;
procedure hb_map_destroy(map: Phb_map_t); cdecl; external LIB_HARFBUZZ;
function hb_map_set_user_data(map: Phb_map_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_map_get_user_data(const map: Phb_map_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
function hb_map_allocation_successful(const map: Phb_map_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_map_copy(const map: Phb_map_t): Phb_map_t; cdecl; external LIB_HARFBUZZ;
procedure hb_map_clear(map: Phb_map_t); cdecl; external LIB_HARFBUZZ;
function hb_map_is_empty(const map: Phb_map_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_map_get_population(const map: Phb_map_t): Cardinal; cdecl; external LIB_HARFBUZZ;
function hb_map_is_equal(const map: Phb_map_t; const other: Phb_map_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_map_hash(const map: Phb_map_t): Cardinal; cdecl; external LIB_HARFBUZZ;
procedure hb_map_set(map: Phb_map_t; key: hb_codepoint_t; value: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
function hb_map_get(const map: Phb_map_t; key: hb_codepoint_t): hb_codepoint_t; cdecl; external LIB_HARFBUZZ;
procedure hb_map_del(map: Phb_map_t; key: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
function hb_map_has(const map: Phb_map_t; key: hb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_map_update(map: Phb_map_t; const other: Phb_map_t); cdecl; external LIB_HARFBUZZ;
function hb_map_next(const map: Phb_map_t; idx: PInteger; key: Phb_codepoint_t; value: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_map_keys(const map: Phb_map_t; keys: Phb_set_t); cdecl; external LIB_HARFBUZZ;
procedure hb_map_values(const map: Phb_map_t; values: Phb_set_t); cdecl; external LIB_HARFBUZZ;
function hb_face_count(blob: Phb_blob_t): Cardinal; cdecl; external LIB_HARFBUZZ;
function hb_face_create(blob: Phb_blob_t; index: Cardinal): Phb_face_t; cdecl; external LIB_HARFBUZZ;
function hb_face_create_or_fail(blob: Phb_blob_t; index: Cardinal): Phb_face_t; cdecl; external LIB_HARFBUZZ;
//function hb_face_create_or_fail_using(blob: Phb_blob_t; index: Cardinal; const loader_name: PUTF8Char): Phb_face_t; cdecl; external LIB_HARFBUZZ;
//function hb_face_create_from_file_or_fail(const file_name: PUTF8Char; index: Cardinal): Phb_face_t; cdecl; external LIB_HARFBUZZ;
//function hb_face_create_from_file_or_fail_using(const file_name: PUTF8Char; index: Cardinal; const loader_name: PUTF8Char): Phb_face_t; cdecl; external LIB_HARFBUZZ;
//function hb_face_list_loaders(): PPUTF8Char; cdecl; external LIB_HARFBUZZ;
function hb_face_create_for_tables(reference_table_func: hb_reference_table_func_t; user_data: Pointer; destroy: hb_destroy_func_t): Phb_face_t; cdecl; external LIB_HARFBUZZ;
function hb_face_get_empty(): Phb_face_t; cdecl; external LIB_HARFBUZZ;
function hb_face_reference(face: Phb_face_t): Phb_face_t; cdecl; external LIB_HARFBUZZ;
procedure hb_face_destroy(face: Phb_face_t); cdecl; external LIB_HARFBUZZ;
function hb_face_set_user_data(face: Phb_face_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_face_get_user_data(const face: Phb_face_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
procedure hb_face_make_immutable(face: Phb_face_t); cdecl; external LIB_HARFBUZZ;
function hb_face_is_immutable(face: Phb_face_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_face_reference_table(const face: Phb_face_t; tag: hb_tag_t): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
function hb_face_reference_blob(face: Phb_face_t): Phb_blob_t; cdecl; external LIB_HARFBUZZ;
procedure hb_face_set_index(face: Phb_face_t; index: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_face_get_index(const face: Phb_face_t): Cardinal; cdecl; external LIB_HARFBUZZ;
procedure hb_face_set_upem(face: Phb_face_t; upem: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_face_get_upem(const face: Phb_face_t): Cardinal; cdecl; external LIB_HARFBUZZ;
procedure hb_face_set_glyph_count(face: Phb_face_t; glyph_count: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_face_get_glyph_count(const face: Phb_face_t): Cardinal; cdecl; external LIB_HARFBUZZ;
procedure hb_face_set_get_table_tags_func(face: Phb_face_t; func: hb_get_table_tags_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
function hb_face_get_table_tags(const face: Phb_face_t; start_offset: Cardinal; table_count: PCardinal; table_tags: Phb_tag_t): Cardinal; cdecl; external LIB_HARFBUZZ;
//procedure hb_face_collect_unicodes(face: Phb_face_t; &out: Phb_set_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_face_collect_nominal_glyph_mapping(face: Phb_face_t; mapping: Phb_map_t; unicodes: Phb_set_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_face_collect_variation_selectors(face: Phb_face_t; &out: Phb_set_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_face_collect_variation_unicodes(face: Phb_face_t; variation_selector: hb_codepoint_t; &out: Phb_set_t); cdecl; external LIB_HARFBUZZ;
function hb_face_builder_create(): Phb_face_t; cdecl; external LIB_HARFBUZZ;
function hb_face_builder_add_table(face: Phb_face_t; tag: hb_tag_t; blob: Phb_blob_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_face_builder_sort_tables(face: Phb_face_t; const tags: Phb_tag_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_font_funcs_set_glyph_func(ffuncs: Pointer; func: hb_font_get_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_unicode_funcs_set_eastasian_width_func(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_eastasian_width_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//function hb_unicode_eastasian_width(ufuncs: Phb_unicode_funcs_t; unicode: hb_codepoint_t): Cardinal; cdecl; external LIB_HARFBUZZ;
//procedure hb_unicode_funcs_set_decompose_compatibility_func(ufuncs: Phb_unicode_funcs_t; func: hb_unicode_decompose_compatibility_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//function hb_unicode_decompose_compatibility(ufuncs: Phb_unicode_funcs_t; u: hb_codepoint_t; decomposed: Phb_codepoint_t): Cardinal; cdecl; external LIB_HARFBUZZ;
//procedure hb_font_funcs_set_glyph_shape_func(ffuncs: Pointer; func: hb_font_get_glyph_shape_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_font_funcs_set_draw_glyph_func(ffuncs: Pointer; func: hb_font_draw_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_font_funcs_set_paint_glyph_func(ffuncs: Pointer; func: hb_font_paint_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_font_get_glyph_shape(font: Phb_font_t; glyph: hb_codepoint_t; dfuncs: Pointer; draw_data: Pointer); cdecl; external LIB_HARFBUZZ;
//function hb_paint_funcs_create(): Phb_paint_funcs_t; cdecl; external LIB_HARFBUZZ;
//function hb_paint_funcs_get_empty(): Phb_paint_funcs_t; cdecl; external LIB_HARFBUZZ;
//function hb_paint_funcs_reference(funcs: Phb_paint_funcs_t): Phb_paint_funcs_t; cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_destroy(funcs: Phb_paint_funcs_t); cdecl; external LIB_HARFBUZZ;
//function hb_paint_funcs_set_user_data(funcs: Phb_paint_funcs_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
//function hb_paint_funcs_get_user_data(const funcs: Phb_paint_funcs_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_make_immutable(funcs: Phb_paint_funcs_t); cdecl; external LIB_HARFBUZZ;
//function hb_paint_funcs_is_immutable(funcs: Phb_paint_funcs_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
//function hb_color_line_get_color_stops(color_line: Phb_color_line_t; start: Cardinal; count: PCardinal; color_stops: Phb_color_stop_t): Cardinal; cdecl; external LIB_HARFBUZZ;
//function hb_color_line_get_extend(color_line: Phb_color_line_t): hb_paint_extend_t; cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_push_transform_func(funcs: Phb_paint_funcs_t; func: hb_paint_push_transform_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_pop_transform_func(funcs: Phb_paint_funcs_t; func: hb_paint_pop_transform_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_color_glyph_func(funcs: Phb_paint_funcs_t; func: hb_paint_color_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_push_clip_glyph_func(funcs: Phb_paint_funcs_t; func: hb_paint_push_clip_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_push_clip_rectangle_func(funcs: Phb_paint_funcs_t; func: hb_paint_push_clip_rectangle_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_pop_clip_func(funcs: Phb_paint_funcs_t; func: hb_paint_pop_clip_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_color_func(funcs: Phb_paint_funcs_t; func: hb_paint_color_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_image_func(funcs: Phb_paint_funcs_t; func: hb_paint_image_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_linear_gradient_func(funcs: Phb_paint_funcs_t; func: hb_paint_linear_gradient_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_radial_gradient_func(funcs: Phb_paint_funcs_t; func: hb_paint_radial_gradient_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_sweep_gradient_func(funcs: Phb_paint_funcs_t; func: hb_paint_sweep_gradient_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_push_group_func(funcs: Phb_paint_funcs_t; func: hb_paint_push_group_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_pop_group_func(funcs: Phb_paint_funcs_t; func: hb_paint_pop_group_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_funcs_set_custom_palette_color_func(funcs: Phb_paint_funcs_t; func: hb_paint_custom_palette_color_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_push_transform(funcs: Phb_paint_funcs_t; paint_data: Pointer; xx: Single; yx: Single; xy: Single; yy: Single; dx: Single; dy: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_push_font_transform(funcs: Phb_paint_funcs_t; paint_data: Pointer; const font: Phb_font_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_push_inverse_font_transform(funcs: Phb_paint_funcs_t; paint_data: Pointer; const font: Phb_font_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_pop_transform(funcs: Phb_paint_funcs_t; paint_data: Pointer); cdecl; external LIB_HARFBUZZ;
//function hb_paint_color_glyph(funcs: Phb_paint_funcs_t; paint_data: Pointer; glyph: hb_codepoint_t; font: Phb_font_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_push_clip_glyph(funcs: Phb_paint_funcs_t; paint_data: Pointer; glyph: hb_codepoint_t; font: Phb_font_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_push_clip_rectangle(funcs: Phb_paint_funcs_t; paint_data: Pointer; xmin: Single; ymin: Single; xmax: Single; ymax: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_pop_clip(funcs: Phb_paint_funcs_t; paint_data: Pointer); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_color(funcs: Phb_paint_funcs_t; paint_data: Pointer; is_foreground: hb_bool_t; color: hb_color_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_image(funcs: Phb_paint_funcs_t; paint_data: Pointer; image: Phb_blob_t; width: Cardinal; height: Cardinal; format: hb_tag_t; slant: Single; extents: Phb_glyph_extents_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_linear_gradient(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_line: Phb_color_line_t; x0: Single; y0: Single; x1: Single; y1: Single; x2: Single; y2: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_radial_gradient(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_line: Phb_color_line_t; x0: Single; y0: Single; r0: Single; x1: Single; y1: Single; r1: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_sweep_gradient(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_line: Phb_color_line_t; x0: Single; y0: Single; start_angle: Single; end_angle: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_push_group(funcs: Phb_paint_funcs_t; paint_data: Pointer); cdecl; external LIB_HARFBUZZ;
//procedure hb_paint_pop_group(funcs: Phb_paint_funcs_t; paint_data: Pointer; mode: hb_paint_composite_mode_t); cdecl; external LIB_HARFBUZZ;
//function hb_paint_custom_palette_color(funcs: Phb_paint_funcs_t; paint_data: Pointer; color_index: Cardinal; color: Phb_color_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_shape(font: Phb_font_t; buffer: Pointer; const features: Phb_feature_t; num_features: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_shape_full(font: Phb_font_t; buffer: Pointer; const features: Phb_feature_t; num_features: Cardinal; const shaper_list: PPUTF8Char): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_shape_list_shapers(): PPUTF8Char; cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_create(face: Phb_face_t; const props: Pointer; const user_features: Phb_feature_t; num_user_features: Cardinal; const shaper_list: PPUTF8Char): Phb_shape_plan_t; cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_create_cached(face: Phb_face_t; const props: Pointer; const user_features: Phb_feature_t; num_user_features: Cardinal; const shaper_list: PPUTF8Char): Phb_shape_plan_t; cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_create2(face: Phb_face_t; const props: Pointer; const user_features: Phb_feature_t; num_user_features: Cardinal; const coords: PInteger; num_coords: Cardinal; const shaper_list: PPUTF8Char): Phb_shape_plan_t; cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_create_cached2(face: Phb_face_t; const props: Pointer; const user_features: Phb_feature_t; num_user_features: Cardinal; const coords: PInteger; num_coords: Cardinal; const shaper_list: PPUTF8Char): Phb_shape_plan_t; cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_get_empty(): Phb_shape_plan_t; cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_reference(shape_plan: Phb_shape_plan_t): Phb_shape_plan_t; cdecl; external LIB_HARFBUZZ;
procedure hb_shape_plan_destroy(shape_plan: Phb_shape_plan_t); cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_set_user_data(shape_plan: Phb_shape_plan_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_get_user_data(const shape_plan: Phb_shape_plan_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_execute(shape_plan: Phb_shape_plan_t; font: Phb_font_t; buffer: Pointer; const features: Phb_feature_t; num_features: Cardinal): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_shape_plan_get_shaper(shape_plan: Phb_shape_plan_t): PUTF8Char; cdecl; external LIB_HARFBUZZ;
//function hb_style_get_value(font: Phb_font_t; style_tag: hb_style_tag_t): Single; cdecl; external LIB_HARFBUZZ;
procedure hb_version(major: PCardinal; minor: PCardinal; micro: PCardinal); cdecl; external LIB_HARFBUZZ;
function hb_version_string(): PUTF8Char; cdecl; external LIB_HARFBUZZ;
function hb_version_atleast(major: Cardinal; minor: Cardinal; micro: Cardinal): hb_bool_t; cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_funcs_set_move_to_func(dfuncs: Phb_draw_funcs_t; func: hb_draw_move_to_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_funcs_set_line_to_func(dfuncs: Phb_draw_funcs_t; func: hb_draw_line_to_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_funcs_set_quadratic_to_func(dfuncs: Phb_draw_funcs_t; func: hb_draw_quadratic_to_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_funcs_set_cubic_to_func(dfuncs: Phb_draw_funcs_t; func: hb_draw_cubic_to_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_funcs_set_close_path_func(dfuncs: Phb_draw_funcs_t; func: hb_draw_close_path_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
//function hb_draw_funcs_create(): Phb_draw_funcs_t; cdecl; external LIB_HARFBUZZ;
//function hb_draw_funcs_get_empty(): Phb_draw_funcs_t; cdecl; external LIB_HARFBUZZ;
//function hb_draw_funcs_reference(dfuncs: Phb_draw_funcs_t): Phb_draw_funcs_t; cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_funcs_destroy(dfuncs: Phb_draw_funcs_t); cdecl; external LIB_HARFBUZZ;
//function hb_draw_funcs_set_user_data(dfuncs: Phb_draw_funcs_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
//function hb_draw_funcs_get_user_data(const dfuncs: Phb_draw_funcs_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_funcs_make_immutable(dfuncs: Phb_draw_funcs_t); cdecl; external LIB_HARFBUZZ;
//function hb_draw_funcs_is_immutable(dfuncs: Phb_draw_funcs_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_move_to(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; to_x: Single; to_y: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_line_to(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; to_x: Single; to_y: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_quadratic_to(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; control_x: Single; control_y: Single; to_x: Single; to_y: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_cubic_to(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t; control1_x: Single; control1_y: Single; control2_x: Single; control2_y: Single; to_x: Single; to_y: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_draw_close_path(dfuncs: Phb_draw_funcs_t; draw_data: Pointer; st: Phb_draw_state_t); cdecl; external LIB_HARFBUZZ;
function hb_font_funcs_create(): Phb_font_funcs_t; cdecl; external LIB_HARFBUZZ;
function hb_font_funcs_get_empty(): Phb_font_funcs_t; cdecl; external LIB_HARFBUZZ;
function hb_font_funcs_reference(ffuncs: Phb_font_funcs_t): Phb_font_funcs_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_destroy(ffuncs: Phb_font_funcs_t); cdecl; external LIB_HARFBUZZ;
function hb_font_funcs_set_user_data(ffuncs: Phb_font_funcs_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_funcs_get_user_data(const ffuncs: Phb_font_funcs_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_make_immutable(ffuncs: Phb_font_funcs_t); cdecl; external LIB_HARFBUZZ;
function hb_font_funcs_is_immutable(ffuncs: Phb_font_funcs_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_font_h_extents_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_font_h_extents_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_font_v_extents_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_font_v_extents_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_nominal_glyph_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_nominal_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_nominal_glyphs_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_nominal_glyphs_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_variation_glyph_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_variation_glyph_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_h_advance_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_h_advance_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_v_advance_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_v_advance_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_h_advances_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_h_advances_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_v_advances_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_v_advances_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_h_origin_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_h_origin_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_v_origin_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_v_origin_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_h_kerning_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_h_kerning_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_extents_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_extents_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_contour_point_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_contour_point_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_name_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_name_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_glyph_from_name_func(ffuncs: Phb_font_funcs_t; func: hb_font_get_glyph_from_name_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_draw_glyph_or_fail_func(ffuncs: Phb_font_funcs_t; func: hb_font_draw_glyph_or_fail_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_funcs_set_paint_glyph_or_fail_func(ffuncs: Phb_font_funcs_t; func: hb_font_paint_glyph_or_fail_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
function hb_font_get_h_extents(font: Phb_font_t; extents: Phb_font_extents_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_v_extents(font: Phb_font_t; extents: Phb_font_extents_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_nominal_glyph(font: Phb_font_t; unicode: hb_codepoint_t; glyph: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_variation_glyph(font: Phb_font_t; unicode: hb_codepoint_t; variation_selector: hb_codepoint_t; glyph: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_nominal_glyphs(font: Phb_font_t; count: Cardinal; const first_unicode: Phb_codepoint_t; unicode_stride: Cardinal; first_glyph: Phb_codepoint_t; glyph_stride: Cardinal): Cardinal; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_h_advance(font: Phb_font_t; glyph: hb_codepoint_t): hb_position_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_v_advance(font: Phb_font_t; glyph: hb_codepoint_t): hb_position_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_glyph_h_advances(font: Phb_font_t; count: Cardinal; const first_glyph: Phb_codepoint_t; glyph_stride: Cardinal; first_advance: Phb_position_t; advance_stride: Cardinal); cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_glyph_v_advances(font: Phb_font_t; count: Cardinal; const first_glyph: Phb_codepoint_t; glyph_stride: Cardinal; first_advance: Phb_position_t; advance_stride: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_h_origin(font: Phb_font_t; glyph: hb_codepoint_t; x: Phb_position_t; y: Phb_position_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_v_origin(font: Phb_font_t; glyph: hb_codepoint_t; x: Phb_position_t; y: Phb_position_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_h_kerning(font: Phb_font_t; left_glyph: hb_codepoint_t; right_glyph: hb_codepoint_t): hb_position_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_extents(font: Phb_font_t; glyph: hb_codepoint_t; extents: Phb_glyph_extents_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_contour_point(font: Phb_font_t; glyph: hb_codepoint_t; point_index: Cardinal; x: Phb_position_t; y: Phb_position_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_name(font: Phb_font_t; glyph: hb_codepoint_t; name: PUTF8Char; size: Cardinal): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_from_name(font: Phb_font_t; const name: PUTF8Char; len: Integer; glyph: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_draw_glyph_or_fail(font: Phb_font_t; glyph: hb_codepoint_t; dfuncs: Phb_draw_funcs_t; draw_data: Pointer): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_paint_glyph_or_fail(font: Phb_font_t; glyph: hb_codepoint_t; pfuncs: Phb_paint_funcs_t; paint_data: Pointer; palette_index: Cardinal; foreground: hb_color_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph(font: Phb_font_t; unicode: hb_codepoint_t; variation_selector: hb_codepoint_t; glyph: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_extents_for_direction(font: Phb_font_t; direction: hb_direction_t; extents: Phb_font_extents_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_glyph_advance_for_direction(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_glyph_advances_for_direction(font: Phb_font_t; direction: hb_direction_t; count: Cardinal; const first_glyph: Phb_codepoint_t; glyph_stride: Cardinal; first_advance: Phb_position_t; advance_stride: Cardinal); cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_glyph_origin_for_direction(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_add_glyph_origin_for_direction(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_subtract_glyph_origin_for_direction(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_glyph_kerning_for_direction(font: Phb_font_t; first_glyph: hb_codepoint_t; second_glyph: hb_codepoint_t; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t); cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_extents_for_origin(font: Phb_font_t; glyph: hb_codepoint_t; direction: hb_direction_t; extents: Phb_glyph_extents_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_glyph_contour_point_for_origin(font: Phb_font_t; glyph: hb_codepoint_t; point_index: Cardinal; direction: hb_direction_t; x: Phb_position_t; y: Phb_position_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_glyph_to_string(font: Phb_font_t; glyph: hb_codepoint_t; s: PUTF8Char; size: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_font_glyph_from_string(font: Phb_font_t; const s: PUTF8Char; len: Integer; glyph: Phb_codepoint_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_draw_glyph(font: Phb_font_t; glyph: hb_codepoint_t; dfuncs: Phb_draw_funcs_t; draw_data: Pointer); cdecl; external LIB_HARFBUZZ;
procedure hb_font_paint_glyph(font: Phb_font_t; glyph: hb_codepoint_t; pfuncs: Phb_paint_funcs_t; paint_data: Pointer; palette_index: Cardinal; foreground: hb_color_t); cdecl; external LIB_HARFBUZZ;
function hb_font_create(face: Phb_face_t): Phb_font_t; cdecl; external LIB_HARFBUZZ;
function hb_font_create_sub_font(parent: Phb_font_t): Phb_font_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_empty(): Phb_font_t; cdecl; external LIB_HARFBUZZ;
function hb_font_reference(font: Phb_font_t): Phb_font_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_destroy(font: Phb_font_t); cdecl; external LIB_HARFBUZZ;
function hb_font_set_user_data(font: Phb_font_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_user_data(const font: Phb_font_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
procedure hb_font_make_immutable(font: Phb_font_t); cdecl; external LIB_HARFBUZZ;
function hb_font_is_immutable(font: Phb_font_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_get_serial(font: Phb_font_t): Cardinal; cdecl; external LIB_HARFBUZZ;
procedure hb_font_changed(font: Phb_font_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_set_parent(font: Phb_font_t; parent: Phb_font_t); cdecl; external LIB_HARFBUZZ;
function hb_font_get_parent(font: Phb_font_t): Phb_font_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_set_face(font: Phb_font_t; face: Phb_face_t); cdecl; external LIB_HARFBUZZ;
function hb_font_get_face(font: Phb_font_t): Phb_face_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_set_funcs(font: Phb_font_t; klass: Phb_font_funcs_t; font_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_set_funcs_data(font: Phb_font_t; font_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
function hb_font_set_funcs_using(font: Phb_font_t; const name: PUTF8Char): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_font_list_funcs(): PPUTF8Char; cdecl; external LIB_HARFBUZZ;
procedure hb_font_set_scale(font: Phb_font_t; x_scale: Integer; y_scale: Integer); cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_scale(font: Phb_font_t; x_scale: PInteger; y_scale: PInteger); cdecl; external LIB_HARFBUZZ;
procedure hb_font_set_ppem(font: Phb_font_t; x_ppem: Cardinal; y_ppem: Cardinal); cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_ppem(font: Phb_font_t; x_ppem: PCardinal; y_ppem: PCardinal); cdecl; external LIB_HARFBUZZ;
procedure hb_font_set_ptem(font: Phb_font_t; ptem: Single); cdecl; external LIB_HARFBUZZ;
function hb_font_get_ptem(font: Phb_font_t): Single; cdecl; external LIB_HARFBUZZ;
function hb_font_is_synthetic(font: Phb_font_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_font_set_synthetic_bold(font: Phb_font_t; x_embolden: Single; y_embolden: Single; in_place: hb_bool_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_get_synthetic_bold(font: Phb_font_t; x_embolden: PSingle; y_embolden: PSingle; in_place: Phb_bool_t); cdecl; external LIB_HARFBUZZ;
procedure hb_font_set_synthetic_slant(font: Phb_font_t; slant: Single); cdecl; external LIB_HARFBUZZ;
function hb_font_get_synthetic_slant(font: Phb_font_t): Single; cdecl; external LIB_HARFBUZZ;
//procedure hb_font_set_variations(font: Phb_font_t; const variations: Phb_variation_t; variations_length: Cardinal); cdecl; external LIB_HARFBUZZ;
//procedure hb_font_set_variation(font: Phb_font_t; tag: hb_tag_t; value: Single); cdecl; external LIB_HARFBUZZ;
//procedure hb_font_set_var_coords_design(font: Phb_font_t; const coords: PSingle; coords_length: Cardinal); cdecl; external LIB_HARFBUZZ;
//function hb_font_get_var_coords_design(font: Phb_font_t; length: PCardinal): PSingle; cdecl; external LIB_HARFBUZZ;
//procedure hb_font_set_var_coords_normalized(font: Phb_font_t; const coords: PInteger; coords_length: Cardinal); cdecl; external LIB_HARFBUZZ;
//function hb_font_get_var_coords_normalized(font: Phb_font_t; length: PCardinal): PInteger; cdecl; external LIB_HARFBUZZ;
//procedure hb_font_set_var_named_instance(font: Phb_font_t; instance_index: Cardinal); cdecl; external LIB_HARFBUZZ;
//function hb_font_get_var_named_instance(font: Phb_font_t): Cardinal; cdecl; external LIB_HARFBUZZ;
function hb_glyph_info_get_glyph_flags(const info: Phb_glyph_info_t): hb_glyph_flags_t; cdecl; external LIB_HARFBUZZ;
function hb_segment_properties_equal(const a: Phb_segment_properties_t; const b: Phb_segment_properties_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_segment_properties_hash(const p: Phb_segment_properties_t): Cardinal; cdecl; external LIB_HARFBUZZ;
procedure hb_segment_properties_overlay(p: Phb_segment_properties_t; const src: Phb_segment_properties_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_create(): Phb_buffer_t; cdecl; external LIB_HARFBUZZ;
function hb_buffer_create_similar(const src: Phb_buffer_t): Phb_buffer_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_reset(buffer: Phb_buffer_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_empty(): Phb_buffer_t; cdecl; external LIB_HARFBUZZ;
function hb_buffer_reference(buffer: Phb_buffer_t): Phb_buffer_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_destroy(buffer: Phb_buffer_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_set_user_data(buffer: Phb_buffer_t; key: Phb_user_data_key_t; data: Pointer; destroy: hb_destroy_func_t; replace: hb_bool_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_user_data(const buffer: Phb_buffer_t; key: Phb_user_data_key_t): Pointer; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_content_type(buffer: Phb_buffer_t; content_type: hb_buffer_content_type_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_content_type(const buffer: Phb_buffer_t): hb_buffer_content_type_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_unicode_funcs(buffer: Phb_buffer_t; unicode_funcs: Phb_unicode_funcs_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_unicode_funcs(const buffer: Phb_buffer_t): Phb_unicode_funcs_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_direction(buffer: Phb_buffer_t; direction: hb_direction_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_direction(const buffer: Phb_buffer_t): hb_direction_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_script(buffer: Phb_buffer_t; script: hb_script_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_script(const buffer: Phb_buffer_t): hb_script_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_language(buffer: Phb_buffer_t; language: hb_language_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_language(const buffer: Phb_buffer_t): hb_language_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_segment_properties(buffer: Phb_buffer_t; const props: Phb_segment_properties_t); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_get_segment_properties(const buffer: Phb_buffer_t; props: Phb_segment_properties_t); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_guess_segment_properties(buffer: Phb_buffer_t); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_flags(buffer: Phb_buffer_t; flags: hb_buffer_flags_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_flags(const buffer: Phb_buffer_t): hb_buffer_flags_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_cluster_level(buffer: Phb_buffer_t; cluster_level: hb_buffer_cluster_level_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_cluster_level(const buffer: Phb_buffer_t): hb_buffer_cluster_level_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_replacement_codepoint(buffer: Phb_buffer_t; replacement: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_replacement_codepoint(const buffer: Phb_buffer_t): hb_codepoint_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_invisible_glyph(buffer: Phb_buffer_t; invisible: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_invisible_glyph(const buffer: Phb_buffer_t): hb_codepoint_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_not_found_glyph(buffer: Phb_buffer_t; not_found: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_not_found_glyph(const buffer: Phb_buffer_t): hb_codepoint_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_not_found_variation_selector_glyph(buffer: Phb_buffer_t; not_found_variation_selector: hb_codepoint_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_not_found_variation_selector_glyph(const buffer: Phb_buffer_t): hb_codepoint_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_set_random_state(buffer: Phb_buffer_t; state: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_random_state(const buffer: Phb_buffer_t): Cardinal; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_clear_contents(buffer: Phb_buffer_t); cdecl; external LIB_HARFBUZZ;
function hb_buffer_pre_allocate(buffer: Phb_buffer_t; size: Cardinal): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_buffer_allocation_successful(buffer: Phb_buffer_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_reverse(buffer: Phb_buffer_t); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_reverse_range(buffer: Phb_buffer_t; start: Cardinal; &end: Cardinal); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_reverse_clusters(buffer: Phb_buffer_t); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_add(buffer: Phb_buffer_t; codepoint: hb_codepoint_t; cluster: Cardinal); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_add_utf8(buffer: Phb_buffer_t; const text: PUTF8Char; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_add_utf16(buffer: Phb_buffer_t; const text: PChar; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_add_utf32(buffer: Phb_buffer_t; const text: PUInt32; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_add_latin1(buffer: Phb_buffer_t; const text: PUInt8; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_add_codepoints(buffer: Phb_buffer_t; const text: Phb_codepoint_t; text_length: Integer; item_offset: Cardinal; item_length: Integer); cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_append(buffer: Phb_buffer_t; const source: Phb_buffer_t; start: Cardinal; &end: Cardinal); cdecl; external LIB_HARFBUZZ;
function hb_buffer_set_length(buffer: Phb_buffer_t; length: Cardinal): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_length(const buffer: Phb_buffer_t): Cardinal; cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_glyph_infos(buffer: Phb_buffer_t; length: PInteger): Phb_glyph_info_t; cdecl; external LIB_HARFBUZZ;
function hb_buffer_get_glyph_positions(buffer: Phb_buffer_t; length: PInteger): Phb_glyph_position_t; cdecl; external LIB_HARFBUZZ;
function hb_buffer_has_positions(buffer: Phb_buffer_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
procedure hb_buffer_normalize_glyphs(buffer: Phb_buffer_t); cdecl; external LIB_HARFBUZZ;
//function hb_buffer_serialize_format_from_string(const str: PUTF8Char; len: Integer): hb_buffer_serialize_format_t; cdecl; external LIB_HARFBUZZ;
//function hb_buffer_serialize_format_to_string(format: hb_buffer_serialize_format_t): PUTF8Char; cdecl; external LIB_HARFBUZZ;
//function hb_buffer_serialize_list_formats(): PPUTF8Char; cdecl; external LIB_HARFBUZZ;
//function hb_buffer_serialize_glyphs(buffer: Phb_buffer_t; start: Cardinal; &end: Cardinal; buf: PUTF8Char; buf_size: Cardinal; buf_consumed: PCardinal; font: Phb_font_t; format: hb_buffer_serialize_format_t; flags: hb_buffer_serialize_flags_t): Cardinal; cdecl; external LIB_HARFBUZZ;
//function hb_buffer_serialize_unicode(buffer: Phb_buffer_t; start: Cardinal; &end: Cardinal; buf: PUTF8Char; buf_size: Cardinal; buf_consumed: PCardinal; format: hb_buffer_serialize_format_t; flags: hb_buffer_serialize_flags_t): Cardinal; cdecl; external LIB_HARFBUZZ;
//function hb_buffer_serialize(buffer: Phb_buffer_t; start: Cardinal; &end: Cardinal; buf: PUTF8Char; buf_size: Cardinal; buf_consumed: PCardinal; font: Phb_font_t; format: hb_buffer_serialize_format_t; flags: hb_buffer_serialize_flags_t): Cardinal; cdecl; external LIB_HARFBUZZ;
//function hb_buffer_deserialize_glyphs(buffer: Phb_buffer_t; const buf: PUTF8Char; buf_len: Integer; end_ptr: PPUTF8Char; font: Phb_font_t; format: hb_buffer_serialize_format_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
//function hb_buffer_deserialize_unicode(buffer: Phb_buffer_t; const buf: PUTF8Char; buf_len: Integer; end_ptr: PPUTF8Char; format: hb_buffer_serialize_format_t): hb_bool_t; cdecl; external LIB_HARFBUZZ;
function hb_buffer_diff(buffer: Phb_buffer_t; reference: Phb_buffer_t; dottedcircle_glyph: hb_codepoint_t; position_fuzz: Cardinal): hb_buffer_diff_flags_t; cdecl; external LIB_HARFBUZZ;
//procedure hb_buffer_set_message_func(buffer: Phb_buffer_t; func: hb_buffer_message_func_t; user_data: Pointer; destroy: hb_destroy_func_t); cdecl; external LIB_HARFBUZZ;
{$ENDIF}

implementation

{$IFDEF MSWINDOWS}

uses
  Neslib.MemoryModule;

{$R 'HarfBuzzWin32.res' WIN32}
{$R 'HarfBuzzWin64.res' WIN64}

var
  GMod: TMemoryModule = nil;

procedure InitializeHarfBuzzModule;
begin
  GMod := TMemoryModule.Create('HARFBUZZ_DLL');

  @hb_tag_from_string := GMod.GetProcAddress('hb_tag_from_string');
  @hb_tag_to_string := GMod.GetProcAddress('hb_tag_to_string');
  @hb_direction_from_string := GMod.GetProcAddress('hb_direction_from_string');
  @hb_direction_to_string := GMod.GetProcAddress('hb_direction_to_string');
  @hb_language_from_string := GMod.GetProcAddress('hb_language_from_string');
  @hb_language_to_string := GMod.GetProcAddress('hb_language_to_string');
  @hb_language_get_default := GMod.GetProcAddress('hb_language_get_default');
  @hb_language_matches := GMod.GetProcAddress('hb_language_matches');
  @hb_script_from_iso15924_tag := GMod.GetProcAddress('hb_script_from_iso15924_tag');
  @hb_script_from_string := GMod.GetProcAddress('hb_script_from_string');
  @hb_script_to_iso15924_tag := GMod.GetProcAddress('hb_script_to_iso15924_tag');
  @hb_script_get_horizontal_direction := GMod.GetProcAddress('hb_script_get_horizontal_direction');
  @hb_feature_from_string := GMod.GetProcAddress('hb_feature_from_string');
  @hb_feature_to_string := GMod.GetProcAddress('hb_feature_to_string');
  @hb_variation_from_string := GMod.GetProcAddress('hb_variation_from_string');
  @hb_variation_to_string := GMod.GetProcAddress('hb_variation_to_string');
  @hb_color_get_alpha := GMod.GetProcAddress('hb_color_get_alpha');
  @hb_color_get_red := GMod.GetProcAddress('hb_color_get_red');
  @hb_color_get_green := GMod.GetProcAddress('hb_color_get_green');
  @hb_color_get_blue := GMod.GetProcAddress('hb_color_get_blue');
  @hb_malloc := GMod.GetProcAddress('hb_malloc');
  @hb_calloc := GMod.GetProcAddress('hb_calloc');
  @hb_realloc := GMod.GetProcAddress('hb_realloc');
  @hb_free := GMod.GetProcAddress('hb_free');
  @hb_blob_create := GMod.GetProcAddress('hb_blob_create');
  @hb_blob_create_or_fail := GMod.GetProcAddress('hb_blob_create_or_fail');
//  @hb_blob_create_from_file := GMod.GetProcAddress('hb_blob_create_from_file');
//  @hb_blob_create_from_file_or_fail := GMod.GetProcAddress('hb_blob_create_from_file_or_fail');
  @hb_blob_create_sub_blob := GMod.GetProcAddress('hb_blob_create_sub_blob');
  @hb_blob_copy_writable_or_fail := GMod.GetProcAddress('hb_blob_copy_writable_or_fail');
  @hb_blob_get_empty := GMod.GetProcAddress('hb_blob_get_empty');
  @hb_blob_reference := GMod.GetProcAddress('hb_blob_reference');
  @hb_blob_destroy := GMod.GetProcAddress('hb_blob_destroy');
  @hb_blob_set_user_data := GMod.GetProcAddress('hb_blob_set_user_data');
  @hb_blob_get_user_data := GMod.GetProcAddress('hb_blob_get_user_data');
  @hb_blob_make_immutable := GMod.GetProcAddress('hb_blob_make_immutable');
  @hb_blob_is_immutable := GMod.GetProcAddress('hb_blob_is_immutable');
  @hb_blob_get_length := GMod.GetProcAddress('hb_blob_get_length');
  @hb_blob_get_data := GMod.GetProcAddress('hb_blob_get_data');
  @hb_blob_get_data_writable := GMod.GetProcAddress('hb_blob_get_data_writable');
  @hb_unicode_funcs_get_default := GMod.GetProcAddress('hb_unicode_funcs_get_default');
  @hb_unicode_funcs_create := GMod.GetProcAddress('hb_unicode_funcs_create');
  @hb_unicode_funcs_get_empty := GMod.GetProcAddress('hb_unicode_funcs_get_empty');
  @hb_unicode_funcs_reference := GMod.GetProcAddress('hb_unicode_funcs_reference');
  @hb_unicode_funcs_destroy := GMod.GetProcAddress('hb_unicode_funcs_destroy');
  @hb_unicode_funcs_set_user_data := GMod.GetProcAddress('hb_unicode_funcs_set_user_data');
  @hb_unicode_funcs_get_user_data := GMod.GetProcAddress('hb_unicode_funcs_get_user_data');
  @hb_unicode_funcs_make_immutable := GMod.GetProcAddress('hb_unicode_funcs_make_immutable');
  @hb_unicode_funcs_is_immutable := GMod.GetProcAddress('hb_unicode_funcs_is_immutable');
  @hb_unicode_funcs_get_parent := GMod.GetProcAddress('hb_unicode_funcs_get_parent');
  @hb_unicode_funcs_set_combining_class_func := GMod.GetProcAddress('hb_unicode_funcs_set_combining_class_func');
  @hb_unicode_funcs_set_general_category_func := GMod.GetProcAddress('hb_unicode_funcs_set_general_category_func');
  @hb_unicode_funcs_set_mirroring_func := GMod.GetProcAddress('hb_unicode_funcs_set_mirroring_func');
  @hb_unicode_funcs_set_script_func := GMod.GetProcAddress('hb_unicode_funcs_set_script_func');
  @hb_unicode_funcs_set_compose_func := GMod.GetProcAddress('hb_unicode_funcs_set_compose_func');
  @hb_unicode_funcs_set_decompose_func := GMod.GetProcAddress('hb_unicode_funcs_set_decompose_func');
  @hb_unicode_combining_class := GMod.GetProcAddress('hb_unicode_combining_class');
  @hb_unicode_general_category := GMod.GetProcAddress('hb_unicode_general_category');
  @hb_unicode_mirroring := GMod.GetProcAddress('hb_unicode_mirroring');
  @hb_unicode_script := GMod.GetProcAddress('hb_unicode_script');
  @hb_unicode_compose := GMod.GetProcAddress('hb_unicode_compose');
  @hb_unicode_decompose := GMod.GetProcAddress('hb_unicode_decompose');
  @hb_set_create := GMod.GetProcAddress('hb_set_create');
  @hb_set_get_empty := GMod.GetProcAddress('hb_set_get_empty');
  @hb_set_reference := GMod.GetProcAddress('hb_set_reference');
  @hb_set_destroy := GMod.GetProcAddress('hb_set_destroy');
  @hb_set_set_user_data := GMod.GetProcAddress('hb_set_set_user_data');
  @hb_set_get_user_data := GMod.GetProcAddress('hb_set_get_user_data');
  @hb_set_allocation_successful := GMod.GetProcAddress('hb_set_allocation_successful');
  @hb_set_copy := GMod.GetProcAddress('hb_set_copy');
  @hb_set_clear := GMod.GetProcAddress('hb_set_clear');
  @hb_set_is_empty := GMod.GetProcAddress('hb_set_is_empty');
  @hb_set_invert := GMod.GetProcAddress('hb_set_invert');
  @hb_set_is_inverted := GMod.GetProcAddress('hb_set_is_inverted');
  @hb_set_has := GMod.GetProcAddress('hb_set_has');
  @hb_set_add := GMod.GetProcAddress('hb_set_add');
  @hb_set_add_range := GMod.GetProcAddress('hb_set_add_range');
  @hb_set_add_sorted_array := GMod.GetProcAddress('hb_set_add_sorted_array');
  @hb_set_del := GMod.GetProcAddress('hb_set_del');
  @hb_set_del_range := GMod.GetProcAddress('hb_set_del_range');
  @hb_set_is_equal := GMod.GetProcAddress('hb_set_is_equal');
  @hb_set_hash := GMod.GetProcAddress('hb_set_hash');
  @hb_set_is_subset := GMod.GetProcAddress('hb_set_is_subset');
  @hb_set_set := GMod.GetProcAddress('hb_set_set');
  @hb_set_union := GMod.GetProcAddress('hb_set_union');
  @hb_set_intersect := GMod.GetProcAddress('hb_set_intersect');
  @hb_set_subtract := GMod.GetProcAddress('hb_set_subtract');
  @hb_set_symmetric_difference := GMod.GetProcAddress('hb_set_symmetric_difference');
  @hb_set_get_population := GMod.GetProcAddress('hb_set_get_population');
  @hb_set_get_min := GMod.GetProcAddress('hb_set_get_min');
  @hb_set_get_max := GMod.GetProcAddress('hb_set_get_max');
  @hb_set_next := GMod.GetProcAddress('hb_set_next');
  @hb_set_previous := GMod.GetProcAddress('hb_set_previous');
  @hb_set_next_range := GMod.GetProcAddress('hb_set_next_range');
  @hb_set_previous_range := GMod.GetProcAddress('hb_set_previous_range');
  @hb_set_next_many := GMod.GetProcAddress('hb_set_next_many');
  @hb_map_create := GMod.GetProcAddress('hb_map_create');
  @hb_map_get_empty := GMod.GetProcAddress('hb_map_get_empty');
  @hb_map_reference := GMod.GetProcAddress('hb_map_reference');
  @hb_map_destroy := GMod.GetProcAddress('hb_map_destroy');
  @hb_map_set_user_data := GMod.GetProcAddress('hb_map_set_user_data');
  @hb_map_get_user_data := GMod.GetProcAddress('hb_map_get_user_data');
  @hb_map_allocation_successful := GMod.GetProcAddress('hb_map_allocation_successful');
  @hb_map_copy := GMod.GetProcAddress('hb_map_copy');
  @hb_map_clear := GMod.GetProcAddress('hb_map_clear');
  @hb_map_is_empty := GMod.GetProcAddress('hb_map_is_empty');
  @hb_map_get_population := GMod.GetProcAddress('hb_map_get_population');
  @hb_map_is_equal := GMod.GetProcAddress('hb_map_is_equal');
  @hb_map_hash := GMod.GetProcAddress('hb_map_hash');
  @hb_map_set := GMod.GetProcAddress('hb_map_set');
  @hb_map_get := GMod.GetProcAddress('hb_map_get');
  @hb_map_del := GMod.GetProcAddress('hb_map_del');
  @hb_map_has := GMod.GetProcAddress('hb_map_has');
  @hb_map_update := GMod.GetProcAddress('hb_map_update');
  @hb_map_next := GMod.GetProcAddress('hb_map_next');
  @hb_map_keys := GMod.GetProcAddress('hb_map_keys');
  @hb_map_values := GMod.GetProcAddress('hb_map_values');
  @hb_face_count := GMod.GetProcAddress('hb_face_count');
  @hb_face_create := GMod.GetProcAddress('hb_face_create');
  @hb_face_create_or_fail := GMod.GetProcAddress('hb_face_create_or_fail');
//  @hb_face_create_or_fail_using := GMod.GetProcAddress('hb_face_create_or_fail_using');
//  @hb_face_create_from_file_or_fail := GMod.GetProcAddress('hb_face_create_from_file_or_fail');
//  @hb_face_create_from_file_or_fail_using := GMod.GetProcAddress('hb_face_create_from_file_or_fail_using');
//  @hb_face_list_loaders := GMod.GetProcAddress('hb_face_list_loaders');
  @hb_face_create_for_tables := GMod.GetProcAddress('hb_face_create_for_tables');
  @hb_face_get_empty := GMod.GetProcAddress('hb_face_get_empty');
  @hb_face_reference := GMod.GetProcAddress('hb_face_reference');
  @hb_face_destroy := GMod.GetProcAddress('hb_face_destroy');
  @hb_face_set_user_data := GMod.GetProcAddress('hb_face_set_user_data');
  @hb_face_get_user_data := GMod.GetProcAddress('hb_face_get_user_data');
  @hb_face_make_immutable := GMod.GetProcAddress('hb_face_make_immutable');
  @hb_face_is_immutable := GMod.GetProcAddress('hb_face_is_immutable');
  @hb_face_reference_table := GMod.GetProcAddress('hb_face_reference_table');
  @hb_face_reference_blob := GMod.GetProcAddress('hb_face_reference_blob');
  @hb_face_set_index := GMod.GetProcAddress('hb_face_set_index');
  @hb_face_get_index := GMod.GetProcAddress('hb_face_get_index');
  @hb_face_set_upem := GMod.GetProcAddress('hb_face_set_upem');
  @hb_face_get_upem := GMod.GetProcAddress('hb_face_get_upem');
  @hb_face_set_glyph_count := GMod.GetProcAddress('hb_face_set_glyph_count');
  @hb_face_get_glyph_count := GMod.GetProcAddress('hb_face_get_glyph_count');
  @hb_face_set_get_table_tags_func := GMod.GetProcAddress('hb_face_set_get_table_tags_func');
  @hb_face_get_table_tags := GMod.GetProcAddress('hb_face_get_table_tags');
//  @hb_face_collect_unicodes := GMod.GetProcAddress('hb_face_collect_unicodes');
//  @hb_face_collect_nominal_glyph_mapping := GMod.GetProcAddress('hb_face_collect_nominal_glyph_mapping');
//  @hb_face_collect_variation_selectors := GMod.GetProcAddress('hb_face_collect_variation_selectors');
//  @hb_face_collect_variation_unicodes := GMod.GetProcAddress('hb_face_collect_variation_unicodes');
  @hb_face_builder_create := GMod.GetProcAddress('hb_face_builder_create');
  @hb_face_builder_add_table := GMod.GetProcAddress('hb_face_builder_add_table');
  @hb_face_builder_sort_tables := GMod.GetProcAddress('hb_face_builder_sort_tables');
//  @hb_font_funcs_set_glyph_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_func');
//  @hb_unicode_funcs_set_eastasian_width_func := GMod.GetProcAddress('hb_unicode_funcs_set_eastasian_width_func');
//  @hb_unicode_eastasian_width := GMod.GetProcAddress('hb_unicode_eastasian_width');
//  @hb_unicode_funcs_set_decompose_compatibility_func := GMod.GetProcAddress('hb_unicode_funcs_set_decompose_compatibility_func');
//  @hb_unicode_decompose_compatibility := GMod.GetProcAddress('hb_unicode_decompose_compatibility');
//  @hb_font_funcs_set_glyph_shape_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_shape_func');
//  @hb_font_funcs_set_draw_glyph_func := GMod.GetProcAddress('hb_font_funcs_set_draw_glyph_func');
//  @hb_font_funcs_set_paint_glyph_func := GMod.GetProcAddress('hb_font_funcs_set_paint_glyph_func');
//  @hb_font_get_glyph_shape := GMod.GetProcAddress('hb_font_get_glyph_shape');
//  @hb_paint_funcs_create := GMod.GetProcAddress('hb_paint_funcs_create');
//  @hb_paint_funcs_get_empty := GMod.GetProcAddress('hb_paint_funcs_get_empty');
//  @hb_paint_funcs_reference := GMod.GetProcAddress('hb_paint_funcs_reference');
//  @hb_paint_funcs_destroy := GMod.GetProcAddress('hb_paint_funcs_destroy');
//  @hb_paint_funcs_set_user_data := GMod.GetProcAddress('hb_paint_funcs_set_user_data');
//  @hb_paint_funcs_get_user_data := GMod.GetProcAddress('hb_paint_funcs_get_user_data');
//  @hb_paint_funcs_make_immutable := GMod.GetProcAddress('hb_paint_funcs_make_immutable');
//  @hb_paint_funcs_is_immutable := GMod.GetProcAddress('hb_paint_funcs_is_immutable');
//  @hb_color_line_get_color_stops := GMod.GetProcAddress('hb_color_line_get_color_stops');
//  @hb_color_line_get_extend := GMod.GetProcAddress('hb_color_line_get_extend');
//  @hb_paint_funcs_set_push_transform_func := GMod.GetProcAddress('hb_paint_funcs_set_push_transform_func');
//  @hb_paint_funcs_set_pop_transform_func := GMod.GetProcAddress('hb_paint_funcs_set_pop_transform_func');
//  @hb_paint_funcs_set_color_glyph_func := GMod.GetProcAddress('hb_paint_funcs_set_color_glyph_func');
//  @hb_paint_funcs_set_push_clip_glyph_func := GMod.GetProcAddress('hb_paint_funcs_set_push_clip_glyph_func');
//  @hb_paint_funcs_set_push_clip_rectangle_func := GMod.GetProcAddress('hb_paint_funcs_set_push_clip_rectangle_func');
//  @hb_paint_funcs_set_pop_clip_func := GMod.GetProcAddress('hb_paint_funcs_set_pop_clip_func');
//  @hb_paint_funcs_set_color_func := GMod.GetProcAddress('hb_paint_funcs_set_color_func');
//  @hb_paint_funcs_set_image_func := GMod.GetProcAddress('hb_paint_funcs_set_image_func');
//  @hb_paint_funcs_set_linear_gradient_func := GMod.GetProcAddress('hb_paint_funcs_set_linear_gradient_func');
//  @hb_paint_funcs_set_radial_gradient_func := GMod.GetProcAddress('hb_paint_funcs_set_radial_gradient_func');
//  @hb_paint_funcs_set_sweep_gradient_func := GMod.GetProcAddress('hb_paint_funcs_set_sweep_gradient_func');
//  @hb_paint_funcs_set_push_group_func := GMod.GetProcAddress('hb_paint_funcs_set_push_group_func');
//  @hb_paint_funcs_set_pop_group_func := GMod.GetProcAddress('hb_paint_funcs_set_pop_group_func');
//  @hb_paint_funcs_set_custom_palette_color_func := GMod.GetProcAddress('hb_paint_funcs_set_custom_palette_color_func');
//  @hb_paint_push_transform := GMod.GetProcAddress('hb_paint_push_transform');
//  @hb_paint_push_font_transform := GMod.GetProcAddress('hb_paint_push_font_transform');
//  @hb_paint_push_inverse_font_transform := GMod.GetProcAddress('hb_paint_push_inverse_font_transform');
//  @hb_paint_pop_transform := GMod.GetProcAddress('hb_paint_pop_transform');
//  @hb_paint_color_glyph := GMod.GetProcAddress('hb_paint_color_glyph');
//  @hb_paint_push_clip_glyph := GMod.GetProcAddress('hb_paint_push_clip_glyph');
//  @hb_paint_push_clip_rectangle := GMod.GetProcAddress('hb_paint_push_clip_rectangle');
//  @hb_paint_pop_clip := GMod.GetProcAddress('hb_paint_pop_clip');
//  @hb_paint_color := GMod.GetProcAddress('hb_paint_color');
//  @hb_paint_image := GMod.GetProcAddress('hb_paint_image');
//  @hb_paint_linear_gradient := GMod.GetProcAddress('hb_paint_linear_gradient');
//  @hb_paint_radial_gradient := GMod.GetProcAddress('hb_paint_radial_gradient');
//  @hb_paint_sweep_gradient := GMod.GetProcAddress('hb_paint_sweep_gradient');
//  @hb_paint_push_group := GMod.GetProcAddress('hb_paint_push_group');
//  @hb_paint_pop_group := GMod.GetProcAddress('hb_paint_pop_group');
//  @hb_paint_custom_palette_color := GMod.GetProcAddress('hb_paint_custom_palette_color');
  @hb_shape := GMod.GetProcAddress('hb_shape');
  @hb_shape_full := GMod.GetProcAddress('hb_shape_full');
  @hb_shape_list_shapers := GMod.GetProcAddress('hb_shape_list_shapers');
  @hb_shape_plan_create := GMod.GetProcAddress('hb_shape_plan_create');
  @hb_shape_plan_create_cached := GMod.GetProcAddress('hb_shape_plan_create_cached');
  @hb_shape_plan_create2 := GMod.GetProcAddress('hb_shape_plan_create2');
  @hb_shape_plan_create_cached2 := GMod.GetProcAddress('hb_shape_plan_create_cached2');
  @hb_shape_plan_get_empty := GMod.GetProcAddress('hb_shape_plan_get_empty');
  @hb_shape_plan_reference := GMod.GetProcAddress('hb_shape_plan_reference');
  @hb_shape_plan_destroy := GMod.GetProcAddress('hb_shape_plan_destroy');
  @hb_shape_plan_set_user_data := GMod.GetProcAddress('hb_shape_plan_set_user_data');
  @hb_shape_plan_get_user_data := GMod.GetProcAddress('hb_shape_plan_get_user_data');
  @hb_shape_plan_execute := GMod.GetProcAddress('hb_shape_plan_execute');
  @hb_shape_plan_get_shaper := GMod.GetProcAddress('hb_shape_plan_get_shaper');
//  @hb_style_get_value := GMod.GetProcAddress('hb_style_get_value');
  @hb_version := GMod.GetProcAddress('hb_version');
  @hb_version_string := GMod.GetProcAddress('hb_version_string');
  @hb_version_atleast := GMod.GetProcAddress('hb_version_atleast');
//  @hb_draw_funcs_set_move_to_func := GMod.GetProcAddress('hb_draw_funcs_set_move_to_func');
//  @hb_draw_funcs_set_line_to_func := GMod.GetProcAddress('hb_draw_funcs_set_line_to_func');
//  @hb_draw_funcs_set_quadratic_to_func := GMod.GetProcAddress('hb_draw_funcs_set_quadratic_to_func');
//  @hb_draw_funcs_set_cubic_to_func := GMod.GetProcAddress('hb_draw_funcs_set_cubic_to_func');
//  @hb_draw_funcs_set_close_path_func := GMod.GetProcAddress('hb_draw_funcs_set_close_path_func');
//  @hb_draw_funcs_create := GMod.GetProcAddress('hb_draw_funcs_create');
//  @hb_draw_funcs_get_empty := GMod.GetProcAddress('hb_draw_funcs_get_empty');
//  @hb_draw_funcs_reference := GMod.GetProcAddress('hb_draw_funcs_reference');
//  @hb_draw_funcs_destroy := GMod.GetProcAddress('hb_draw_funcs_destroy');
//  @hb_draw_funcs_set_user_data := GMod.GetProcAddress('hb_draw_funcs_set_user_data');
//  @hb_draw_funcs_get_user_data := GMod.GetProcAddress('hb_draw_funcs_get_user_data');
//  @hb_draw_funcs_make_immutable := GMod.GetProcAddress('hb_draw_funcs_make_immutable');
//  @hb_draw_funcs_is_immutable := GMod.GetProcAddress('hb_draw_funcs_is_immutable');
//  @hb_draw_move_to := GMod.GetProcAddress('hb_draw_move_to');
//  @hb_draw_line_to := GMod.GetProcAddress('hb_draw_line_to');
//  @hb_draw_quadratic_to := GMod.GetProcAddress('hb_draw_quadratic_to');
//  @hb_draw_cubic_to := GMod.GetProcAddress('hb_draw_cubic_to');
//  @hb_draw_close_path := GMod.GetProcAddress('hb_draw_close_path');
  @hb_font_funcs_create := GMod.GetProcAddress('hb_font_funcs_create');
  @hb_font_funcs_get_empty := GMod.GetProcAddress('hb_font_funcs_get_empty');
  @hb_font_funcs_reference := GMod.GetProcAddress('hb_font_funcs_reference');
  @hb_font_funcs_destroy := GMod.GetProcAddress('hb_font_funcs_destroy');
  @hb_font_funcs_set_user_data := GMod.GetProcAddress('hb_font_funcs_set_user_data');
  @hb_font_funcs_get_user_data := GMod.GetProcAddress('hb_font_funcs_get_user_data');
  @hb_font_funcs_make_immutable := GMod.GetProcAddress('hb_font_funcs_make_immutable');
  @hb_font_funcs_is_immutable := GMod.GetProcAddress('hb_font_funcs_is_immutable');
  @hb_font_funcs_set_font_h_extents_func := GMod.GetProcAddress('hb_font_funcs_set_font_h_extents_func');
  @hb_font_funcs_set_font_v_extents_func := GMod.GetProcAddress('hb_font_funcs_set_font_v_extents_func');
  @hb_font_funcs_set_nominal_glyph_func := GMod.GetProcAddress('hb_font_funcs_set_nominal_glyph_func');
  @hb_font_funcs_set_nominal_glyphs_func := GMod.GetProcAddress('hb_font_funcs_set_nominal_glyphs_func');
  @hb_font_funcs_set_variation_glyph_func := GMod.GetProcAddress('hb_font_funcs_set_variation_glyph_func');
  @hb_font_funcs_set_glyph_h_advance_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_h_advance_func');
  @hb_font_funcs_set_glyph_v_advance_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_v_advance_func');
  @hb_font_funcs_set_glyph_h_advances_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_h_advances_func');
  @hb_font_funcs_set_glyph_v_advances_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_v_advances_func');
  @hb_font_funcs_set_glyph_h_origin_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_h_origin_func');
  @hb_font_funcs_set_glyph_v_origin_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_v_origin_func');
  @hb_font_funcs_set_glyph_h_kerning_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_h_kerning_func');
  @hb_font_funcs_set_glyph_extents_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_extents_func');
  @hb_font_funcs_set_glyph_contour_point_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_contour_point_func');
  @hb_font_funcs_set_glyph_name_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_name_func');
  @hb_font_funcs_set_glyph_from_name_func := GMod.GetProcAddress('hb_font_funcs_set_glyph_from_name_func');
  @hb_font_funcs_set_draw_glyph_or_fail_func := GMod.GetProcAddress('hb_font_funcs_set_draw_glyph_or_fail_func');
  @hb_font_funcs_set_paint_glyph_or_fail_func := GMod.GetProcAddress('hb_font_funcs_set_paint_glyph_or_fail_func');
  @hb_font_get_h_extents := GMod.GetProcAddress('hb_font_get_h_extents');
  @hb_font_get_v_extents := GMod.GetProcAddress('hb_font_get_v_extents');
  @hb_font_get_nominal_glyph := GMod.GetProcAddress('hb_font_get_nominal_glyph');
  @hb_font_get_variation_glyph := GMod.GetProcAddress('hb_font_get_variation_glyph');
  @hb_font_get_nominal_glyphs := GMod.GetProcAddress('hb_font_get_nominal_glyphs');
  @hb_font_get_glyph_h_advance := GMod.GetProcAddress('hb_font_get_glyph_h_advance');
  @hb_font_get_glyph_v_advance := GMod.GetProcAddress('hb_font_get_glyph_v_advance');
  @hb_font_get_glyph_h_advances := GMod.GetProcAddress('hb_font_get_glyph_h_advances');
  @hb_font_get_glyph_v_advances := GMod.GetProcAddress('hb_font_get_glyph_v_advances');
  @hb_font_get_glyph_h_origin := GMod.GetProcAddress('hb_font_get_glyph_h_origin');
  @hb_font_get_glyph_v_origin := GMod.GetProcAddress('hb_font_get_glyph_v_origin');
  @hb_font_get_glyph_h_kerning := GMod.GetProcAddress('hb_font_get_glyph_h_kerning');
  @hb_font_get_glyph_extents := GMod.GetProcAddress('hb_font_get_glyph_extents');
  @hb_font_get_glyph_contour_point := GMod.GetProcAddress('hb_font_get_glyph_contour_point');
  @hb_font_get_glyph_name := GMod.GetProcAddress('hb_font_get_glyph_name');
  @hb_font_get_glyph_from_name := GMod.GetProcAddress('hb_font_get_glyph_from_name');
  @hb_font_draw_glyph_or_fail := GMod.GetProcAddress('hb_font_draw_glyph_or_fail');
  @hb_font_paint_glyph_or_fail := GMod.GetProcAddress('hb_font_paint_glyph_or_fail');
  @hb_font_get_glyph := GMod.GetProcAddress('hb_font_get_glyph');
  @hb_font_get_extents_for_direction := GMod.GetProcAddress('hb_font_get_extents_for_direction');
  @hb_font_get_glyph_advance_for_direction := GMod.GetProcAddress('hb_font_get_glyph_advance_for_direction');
  @hb_font_get_glyph_advances_for_direction := GMod.GetProcAddress('hb_font_get_glyph_advances_for_direction');
  @hb_font_get_glyph_origin_for_direction := GMod.GetProcAddress('hb_font_get_glyph_origin_for_direction');
  @hb_font_add_glyph_origin_for_direction := GMod.GetProcAddress('hb_font_add_glyph_origin_for_direction');
  @hb_font_subtract_glyph_origin_for_direction := GMod.GetProcAddress('hb_font_subtract_glyph_origin_for_direction');
  @hb_font_get_glyph_kerning_for_direction := GMod.GetProcAddress('hb_font_get_glyph_kerning_for_direction');
  @hb_font_get_glyph_extents_for_origin := GMod.GetProcAddress('hb_font_get_glyph_extents_for_origin');
  @hb_font_get_glyph_contour_point_for_origin := GMod.GetProcAddress('hb_font_get_glyph_contour_point_for_origin');
  @hb_font_glyph_to_string := GMod.GetProcAddress('hb_font_glyph_to_string');
  @hb_font_glyph_from_string := GMod.GetProcAddress('hb_font_glyph_from_string');
  @hb_font_draw_glyph := GMod.GetProcAddress('hb_font_draw_glyph');
  @hb_font_paint_glyph := GMod.GetProcAddress('hb_font_paint_glyph');
  @hb_font_create := GMod.GetProcAddress('hb_font_create');
  @hb_font_create_sub_font := GMod.GetProcAddress('hb_font_create_sub_font');
  @hb_font_get_empty := GMod.GetProcAddress('hb_font_get_empty');
  @hb_font_reference := GMod.GetProcAddress('hb_font_reference');
  @hb_font_destroy := GMod.GetProcAddress('hb_font_destroy');
  @hb_font_set_user_data := GMod.GetProcAddress('hb_font_set_user_data');
  @hb_font_get_user_data := GMod.GetProcAddress('hb_font_get_user_data');
  @hb_font_make_immutable := GMod.GetProcAddress('hb_font_make_immutable');
  @hb_font_is_immutable := GMod.GetProcAddress('hb_font_is_immutable');
  @hb_font_get_serial := GMod.GetProcAddress('hb_font_get_serial');
  @hb_font_changed := GMod.GetProcAddress('hb_font_changed');
  @hb_font_set_parent := GMod.GetProcAddress('hb_font_set_parent');
  @hb_font_get_parent := GMod.GetProcAddress('hb_font_get_parent');
  @hb_font_set_face := GMod.GetProcAddress('hb_font_set_face');
  @hb_font_get_face := GMod.GetProcAddress('hb_font_get_face');
  @hb_font_set_funcs := GMod.GetProcAddress('hb_font_set_funcs');
  @hb_font_set_funcs_data := GMod.GetProcAddress('hb_font_set_funcs_data');
  @hb_font_set_funcs_using := GMod.GetProcAddress('hb_font_set_funcs_using');
  @hb_font_list_funcs := GMod.GetProcAddress('hb_font_list_funcs');
  @hb_font_set_scale := GMod.GetProcAddress('hb_font_set_scale');
  @hb_font_get_scale := GMod.GetProcAddress('hb_font_get_scale');
  @hb_font_set_ppem := GMod.GetProcAddress('hb_font_set_ppem');
  @hb_font_get_ppem := GMod.GetProcAddress('hb_font_get_ppem');
  @hb_font_set_ptem := GMod.GetProcAddress('hb_font_set_ptem');
  @hb_font_get_ptem := GMod.GetProcAddress('hb_font_get_ptem');
  @hb_font_is_synthetic := GMod.GetProcAddress('hb_font_is_synthetic');
  @hb_font_set_synthetic_bold := GMod.GetProcAddress('hb_font_set_synthetic_bold');
  @hb_font_get_synthetic_bold := GMod.GetProcAddress('hb_font_get_synthetic_bold');
  @hb_font_set_synthetic_slant := GMod.GetProcAddress('hb_font_set_synthetic_slant');
  @hb_font_get_synthetic_slant := GMod.GetProcAddress('hb_font_get_synthetic_slant');
//  @hb_font_set_variations := GMod.GetProcAddress('hb_font_set_variations');
//  @hb_font_set_variation := GMod.GetProcAddress('hb_font_set_variation');
//  @hb_font_set_var_coords_design := GMod.GetProcAddress('hb_font_set_var_coords_design');
//  @hb_font_get_var_coords_design := GMod.GetProcAddress('hb_font_get_var_coords_design');
//  @hb_font_set_var_coords_normalized := GMod.GetProcAddress('hb_font_set_var_coords_normalized');
//  @hb_font_get_var_coords_normalized := GMod.GetProcAddress('hb_font_get_var_coords_normalized');
//  @hb_font_set_var_named_instance := GMod.GetProcAddress('hb_font_set_var_named_instance');
//  @hb_font_get_var_named_instance := GMod.GetProcAddress('hb_font_get_var_named_instance');
  @hb_glyph_info_get_glyph_flags := GMod.GetProcAddress('hb_glyph_info_get_glyph_flags');
  @hb_segment_properties_equal := GMod.GetProcAddress('hb_segment_properties_equal');
  @hb_segment_properties_hash := GMod.GetProcAddress('hb_segment_properties_hash');
  @hb_segment_properties_overlay := GMod.GetProcAddress('hb_segment_properties_overlay');
  @hb_buffer_create := GMod.GetProcAddress('hb_buffer_create');
  @hb_buffer_create_similar := GMod.GetProcAddress('hb_buffer_create_similar');
  @hb_buffer_reset := GMod.GetProcAddress('hb_buffer_reset');
  @hb_buffer_get_empty := GMod.GetProcAddress('hb_buffer_get_empty');
  @hb_buffer_reference := GMod.GetProcAddress('hb_buffer_reference');
  @hb_buffer_destroy := GMod.GetProcAddress('hb_buffer_destroy');
  @hb_buffer_set_user_data := GMod.GetProcAddress('hb_buffer_set_user_data');
  @hb_buffer_get_user_data := GMod.GetProcAddress('hb_buffer_get_user_data');
  @hb_buffer_set_content_type := GMod.GetProcAddress('hb_buffer_set_content_type');
  @hb_buffer_get_content_type := GMod.GetProcAddress('hb_buffer_get_content_type');
  @hb_buffer_set_unicode_funcs := GMod.GetProcAddress('hb_buffer_set_unicode_funcs');
  @hb_buffer_get_unicode_funcs := GMod.GetProcAddress('hb_buffer_get_unicode_funcs');
  @hb_buffer_set_direction := GMod.GetProcAddress('hb_buffer_set_direction');
  @hb_buffer_get_direction := GMod.GetProcAddress('hb_buffer_get_direction');
  @hb_buffer_set_script := GMod.GetProcAddress('hb_buffer_set_script');
  @hb_buffer_get_script := GMod.GetProcAddress('hb_buffer_get_script');
  @hb_buffer_set_language := GMod.GetProcAddress('hb_buffer_set_language');
  @hb_buffer_get_language := GMod.GetProcAddress('hb_buffer_get_language');
  @hb_buffer_set_segment_properties := GMod.GetProcAddress('hb_buffer_set_segment_properties');
  @hb_buffer_get_segment_properties := GMod.GetProcAddress('hb_buffer_get_segment_properties');
  @hb_buffer_guess_segment_properties := GMod.GetProcAddress('hb_buffer_guess_segment_properties');
  @hb_buffer_set_flags := GMod.GetProcAddress('hb_buffer_set_flags');
  @hb_buffer_get_flags := GMod.GetProcAddress('hb_buffer_get_flags');
  @hb_buffer_set_cluster_level := GMod.GetProcAddress('hb_buffer_set_cluster_level');
  @hb_buffer_get_cluster_level := GMod.GetProcAddress('hb_buffer_get_cluster_level');
  @hb_buffer_set_replacement_codepoint := GMod.GetProcAddress('hb_buffer_set_replacement_codepoint');
  @hb_buffer_get_replacement_codepoint := GMod.GetProcAddress('hb_buffer_get_replacement_codepoint');
  @hb_buffer_set_invisible_glyph := GMod.GetProcAddress('hb_buffer_set_invisible_glyph');
  @hb_buffer_get_invisible_glyph := GMod.GetProcAddress('hb_buffer_get_invisible_glyph');
  @hb_buffer_set_not_found_glyph := GMod.GetProcAddress('hb_buffer_set_not_found_glyph');
  @hb_buffer_get_not_found_glyph := GMod.GetProcAddress('hb_buffer_get_not_found_glyph');
  @hb_buffer_set_not_found_variation_selector_glyph := GMod.GetProcAddress('hb_buffer_set_not_found_variation_selector_glyph');
  @hb_buffer_get_not_found_variation_selector_glyph := GMod.GetProcAddress('hb_buffer_get_not_found_variation_selector_glyph');
  @hb_buffer_set_random_state := GMod.GetProcAddress('hb_buffer_set_random_state');
  @hb_buffer_get_random_state := GMod.GetProcAddress('hb_buffer_get_random_state');
  @hb_buffer_clear_contents := GMod.GetProcAddress('hb_buffer_clear_contents');
  @hb_buffer_pre_allocate := GMod.GetProcAddress('hb_buffer_pre_allocate');
  @hb_buffer_allocation_successful := GMod.GetProcAddress('hb_buffer_allocation_successful');
  @hb_buffer_reverse := GMod.GetProcAddress('hb_buffer_reverse');
  @hb_buffer_reverse_range := GMod.GetProcAddress('hb_buffer_reverse_range');
  @hb_buffer_reverse_clusters := GMod.GetProcAddress('hb_buffer_reverse_clusters');
  @hb_buffer_add := GMod.GetProcAddress('hb_buffer_add');
  @hb_buffer_add_utf8 := GMod.GetProcAddress('hb_buffer_add_utf8');
  @hb_buffer_add_utf16 := GMod.GetProcAddress('hb_buffer_add_utf16');
  @hb_buffer_add_utf32 := GMod.GetProcAddress('hb_buffer_add_utf32');
  @hb_buffer_add_latin1 := GMod.GetProcAddress('hb_buffer_add_latin1');
  @hb_buffer_add_codepoints := GMod.GetProcAddress('hb_buffer_add_codepoints');
  @hb_buffer_append := GMod.GetProcAddress('hb_buffer_append');
  @hb_buffer_set_length := GMod.GetProcAddress('hb_buffer_set_length');
  @hb_buffer_get_length := GMod.GetProcAddress('hb_buffer_get_length');
  @hb_buffer_get_glyph_infos := GMod.GetProcAddress('hb_buffer_get_glyph_infos');
  @hb_buffer_get_glyph_positions := GMod.GetProcAddress('hb_buffer_get_glyph_positions');
  @hb_buffer_has_positions := GMod.GetProcAddress('hb_buffer_has_positions');
  @hb_buffer_normalize_glyphs := GMod.GetProcAddress('hb_buffer_normalize_glyphs');
//  @hb_buffer_serialize_format_from_string := GMod.GetProcAddress('hb_buffer_serialize_format_from_string');
//  @hb_buffer_serialize_format_to_string := GMod.GetProcAddress('hb_buffer_serialize_format_to_string');
//  @hb_buffer_serialize_list_formats := GMod.GetProcAddress('hb_buffer_serialize_list_formats');
//  @hb_buffer_serialize_glyphs := GMod.GetProcAddress('hb_buffer_serialize_glyphs');
//  @hb_buffer_serialize_unicode := GMod.GetProcAddress('hb_buffer_serialize_unicode');
//  @hb_buffer_serialize := GMod.GetProcAddress('hb_buffer_serialize');
//  @hb_buffer_deserialize_glyphs := GMod.GetProcAddress('hb_buffer_deserialize_glyphs');
//  @hb_buffer_deserialize_unicode := GMod.GetProcAddress('hb_buffer_deserialize_unicode');
  @hb_buffer_diff := GMod.GetProcAddress('hb_buffer_diff');
//  @hb_buffer_set_message_func := GMod.GetProcAddress('hb_buffer_set_message_func');
end;

procedure FinalizeHarfBuzzModule;
begin
  GMod.Free;
end;

initialization
  InitializeHarfBuzzModule;

finalization
  FinalizeHarfBuzzModule;
{$ENDIF !MSWINDOWS}

end.
